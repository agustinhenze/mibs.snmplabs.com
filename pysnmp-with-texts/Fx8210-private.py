#
# PySNMP MIB module Fx8210-private (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/Fx8210-private
# Produced by pysmi-0.3.4 at Fri Jan 31 21:34:02 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ModuleIdentity, iso, NotificationType, ObjectIdentity, Gauge32, Unsigned32, internet, Counter64, TimeTicks, NotificationType, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, mgmt, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "iso", "NotificationType", "ObjectIdentity", "Gauge32", "Unsigned32", "internet", "Counter64", "TimeTicks", "NotificationType", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mgmt", "Counter32", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
fibronics = MibIdentifier((1, 3, 6, 1, 4, 1, 22))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3))
traprun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 1))
traperm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 2))
trapvar = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 3))
fxm8000 = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 10))
finexsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 10, 1))
fxmsystemrun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 10, 1, 1))
fxmsystemperm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 10, 1, 2))
rTrapAddrTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 3, 1, 1), )
if mibBuilder.loadTexts: rTrapAddrTbl.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrTbl.setDescription('Table of managers to which traps must be sent. Up to 10 entries in table. Some (up to 5) entries in table are copied from the permanent trap table at reset time. The other entries are learned from SNMP requests coming to the target station.')
rTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1), ).setIndexNames((0, "Fx8210-private", "rTrapAddrAddr"))
if mibBuilder.loadTexts: rTrapAddrEntry.setStatus('mandatory')
rTrapAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrAddr.setDescription('IP address of entity requesting event notification')
rTrapAddrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrComm.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrComm.setDescription('Community name the receiving entity will expect')
rTrapAddrVer = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrVer.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrVer.setDescription('Version number supported by destination node')
rTrapAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrType.setDescription('Type of event that should be reported to this address, bit 0 - authentication trap bit 1 - other SNMP traps bit 2 - Error Traps bit 3 - Diagnostic Traps bit 4 - Debug Traps')
rTrapAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrState.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrState.setDescription('Determines status of this entry')
rTrapAddrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("removable", 1), ("fixed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrFlag.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrFlag.setDescription('If the entry is fixed, it can not be deleted because of aging, which means it was copied from the permanent trap table.')
rTrapAddrAge = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrAge.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrAge.setDescription('A time stamp of the last time the Manager sent SNMP request to the target agent ( in 50 msec units ).')
rTrapLearning = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapLearning.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapLearning.setDescription('Learn the addresses of the managers automatically.')
rTrapAging = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAging.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAging.setDescription('Time in sec. until a trap entry is erased from the table.')
pTrapAddrTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 3, 2, 1), )
if mibBuilder.loadTexts: pTrapAddrTbl.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapAddrTbl.setDescription('Table of managers to which traps must be sent. Up to 5 entries in table')
pTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1), ).setIndexNames((0, "Fx8210-private", "pTrapAddrAddr"))
if mibBuilder.loadTexts: pTrapAddrEntry.setStatus('mandatory')
pTrapAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapAddrAddr.setDescription('IP address of entity requesting event notification')
pTrapAddrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrComm.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapAddrComm.setDescription('Community name the receiving entity will expect')
pTrapAddrVer = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrVer.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapAddrVer.setDescription('Version number supported by destination node')
pTrapAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapAddrType.setDescription('Type of event that should be reported to this address, bit 0 - authentication trap bit 1 - other SNMP traps bit 2 - Error Traps bit 3 - Diagnostic Traps bit 4 - Debug Traps')
pTrapAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrState.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapAddrState.setDescription('Determines status of this entry')
pTrapLearning = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapLearning.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapLearning.setDescription('Learn the addresses of the managers automatically.')
pTrapAging = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAging.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapAging.setDescription('Time in sec. until a trap entry is erased from the table.')
fxmSystemIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fxmSystemIpAddr.setDescription('IP address of the agent')
fxmSystemIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemIPNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: fxmSystemIPNetMask.setDescription('IP Network Mask')
fxmSystemIPDefGway = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemIPDefGway.setStatus('mandatory')
if mibBuilder.loadTexts: fxmSystemIPDefGway.setDescription('Default Gateway Address')
fxmSystemBroadcastOpt = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemBroadcastOpt.setStatus('mandatory')
if mibBuilder.loadTexts: fxmSystemBroadcastOpt.setDescription('Default Broadcast option: all zeros or all ones')
fxmSystemBootServer = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemBootServer.setStatus('mandatory')
if mibBuilder.loadTexts: fxmSystemBootServer.setDescription('IP address to which a TFTP for boot is sent.')
fxmSystemBootGenName = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemBootGenName.setStatus('mandatory')
if mibBuilder.loadTexts: fxmSystemBootGenName.setDescription('Path and file name that is sent as a TFTP request')
fxmSystemBootMode = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-memory", 1), ("bootp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemBootMode.setStatus('mandatory')
if mibBuilder.loadTexts: fxmSystemBootMode.setDescription('Method for booting')
fxmSystemSelfTestLevel = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("full", 2), ("partial", 3), ("extended", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxmSystemSelfTestLevel.setStatus('mandatory')
if mibBuilder.loadTexts: fxmSystemSelfTestLevel.setDescription('Type of self test to be executed upon cold-reset')
fxmSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warm-reset", 1), ("cold-reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxmSystemReset.setStatus('mandatory')
if mibBuilder.loadTexts: fxmSystemReset.setDescription('Resetting the target station. When reading the instance of this object the value has no meaning.')
pfxmSystemIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemIpAddr.setDescription('IP address of the agent')
pfxmSystemIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemIPNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemIPNetMask.setDescription('IP Network Mask')
pfxmSystemIPDefGway = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemIPDefGway.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemIPDefGway.setDescription('Default Gateway Address')
pfxmSystemBroadcastOpt = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemBroadcastOpt.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemBroadcastOpt.setDescription('Default Broadcast option: all zeros or all ones')
pfxmSystemBootServer = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemBootServer.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemBootServer.setDescription('IP address to which a TFTP for boot is sent.')
pfxmSystemBootGenName = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemBootGenName.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemBootGenName.setDescription('Path and file name that is sent as a TFTP request')
pfxmSystemBootMode = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal-memory", 1), ("bootp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemBootMode.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemBootMode.setDescription('Method for booting')
pfxmSystemSelfTestLevel = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("full", 2), ("partial", 3), ("extended", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSystemSelfTestLevel.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemSelfTestLevel.setDescription('Type of self test to be executed upon cold-reset')
pfxmSpanMode = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfxmSpanMode.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSpanMode.setDescription('Enable/Disable of the spanning tree Algorithm')
pfxmSystemCommunity1 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 10), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity1.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemCommunity1.setDescription('Community string number 1')
pfxmSystemCommunity2 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 11), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity2.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemCommunity2.setDescription('Community string number 2')
pfxmSystemCommunity3 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 12), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity3.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemCommunity3.setDescription('Community string number 3')
pfxmSystemCommunity4 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 13), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity4.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemCommunity4.setDescription('Community string number 4')
pfxmSystemCommunity5 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 14), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity5.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemCommunity5.setDescription('Community string number 5')
pfxmSystemCommunity6 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 15), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity6.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemCommunity6.setDescription('Community string number 6')
pfxmSystemCommunity7 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 16), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity7.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemCommunity7.setDescription('Community string number 7')
pfxmSystemCommunity8 = MibScalar((1, 3, 6, 1, 4, 1, 22, 10, 1, 2, 17), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pfxmSystemCommunity8.setStatus('mandatory')
if mibBuilder.loadTexts: pfxmSystemCommunity8.setDescription('Community string number 8')
eventTrap = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 3, 1), OctetString())
if mibBuilder.loadTexts: eventTrap.setStatus('mandatory')
if mibBuilder.loadTexts: eventTrap.setDescription("Octet string used to send events to NMS. String description: 1'st octet : severity code (ASCII decimal) 2'nd octet : space 3'rd - 5'th octet : diu number (ASCII decimal) 6'th octet : space 7'th - 12'th octet : message code (ASCII decimal) e.g: BR0345 13'th octet : space 14'th and up : extra message string (ASCII)")
sendGenericEvent = NotificationType((1, 3, 6, 1, 4, 1, 22, 10, 1) + (0,1)).setObjects(("Fx8210-private", "eventTrap"))
if mibBuilder.loadTexts: sendGenericEvent.setDescription('This trap message is generated by any software module in the FINEX software. Any type of event can be sent.')
mibBuilder.exportSymbols("Fx8210-private", fxmSystemBootGenName=fxmSystemBootGenName, rTrapAddrComm=rTrapAddrComm, fxmsystemrun=fxmsystemrun, sendGenericEvent=sendGenericEvent, pTrapAging=pTrapAging, fxmSystemBootServer=fxmSystemBootServer, pfxmSystemBootServer=pfxmSystemBootServer, pfxmSystemCommunity6=pfxmSystemCommunity6, rTrapAddrState=rTrapAddrState, fxmSystemIpAddr=fxmSystemIpAddr, rTrapAddrEntry=rTrapAddrEntry, pTrapAddrType=pTrapAddrType, private=private, traperm=traperm, enterprises=enterprises, rTrapAddrTbl=rTrapAddrTbl, rTrapAddrAddr=rTrapAddrAddr, pTrapAddrState=pTrapAddrState, pTrapLearning=pTrapLearning, fxmSystemIPDefGway=fxmSystemIPDefGway, pTrapAddrAddr=pTrapAddrAddr, pfxmSystemBootMode=pfxmSystemBootMode, pfxmSystemCommunity1=pfxmSystemCommunity1, pfxmSystemCommunity3=pfxmSystemCommunity3, trap=trap, pfxmSystemBootGenName=pfxmSystemBootGenName, rTrapAddrAge=rTrapAddrAge, eventTrap=eventTrap, rTrapLearning=rTrapLearning, fxmSystemBroadcastOpt=fxmSystemBroadcastOpt, traprun=traprun, pTrapAddrVer=pTrapAddrVer, trapvar=trapvar, pfxmSystemCommunity4=pfxmSystemCommunity4, pfxmSpanMode=pfxmSpanMode, pfxmSystemSelfTestLevel=pfxmSystemSelfTestLevel, rTrapAging=rTrapAging, pTrapAddrComm=pTrapAddrComm, fxmSystemSelfTestLevel=fxmSystemSelfTestLevel, fxmsystemperm=fxmsystemperm, pfxmSystemCommunity8=pfxmSystemCommunity8, pTrapAddrEntry=pTrapAddrEntry, rTrapAddrType=rTrapAddrType, fibronics=fibronics, pfxmSystemIPNetMask=pfxmSystemIPNetMask, fxmSystemReset=fxmSystemReset, pfxmSystemCommunity2=pfxmSystemCommunity2, fxm8000=fxm8000, pfxmSystemIpAddr=pfxmSystemIpAddr, pfxmSystemCommunity7=pfxmSystemCommunity7, pfxmSystemBroadcastOpt=pfxmSystemBroadcastOpt, rTrapAddrVer=rTrapAddrVer, finexsystem=finexsystem, fxmSystemIPNetMask=fxmSystemIPNetMask, rTrapAddrFlag=rTrapAddrFlag, pfxmSystemIPDefGway=pfxmSystemIPDefGway, pfxmSystemCommunity5=pfxmSystemCommunity5, fxmSystemBootMode=fxmSystemBootMode, pTrapAddrTbl=pTrapAddrTbl)
