#
# PySNMP MIB module Hub-rptr-prvt (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/Hub-rptr-prvt
# Produced by pysmi-0.3.4 at Fri Jan 31 21:34:21 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
rptrPortAdminStatus, rptrPortIndex, rptrPortGroupIndex = mibBuilder.importSymbols("SNMP-REPEATER-MIB", "rptrPortAdminStatus", "rptrPortIndex", "rptrPortGroupIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, internet, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Integer32, Counter32, Gauge32, ObjectIdentity, NotificationType, NotificationType, IpAddress, MibIdentifier, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "internet", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Integer32", "Counter32", "Gauge32", "ObjectIdentity", "NotificationType", "NotificationType", "IpAddress", "MibIdentifier", "Bits", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
fibronics = MibIdentifier((1, 3, 6, 1, 4, 1, 22))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3))
traprun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 1))
traperm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 2))
trapvar = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 3))
fm800 = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51))
fmsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 1))
fmslot = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 2))
fmlu = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 3))
fmdiag = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 5))
fmdebug = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 6))
fmsystemrun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 1, 1))
fmsystemperm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 1, 2))
fmethrptr = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 11))
rptrinfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 11, 1))
rptrgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 11, 2))
rptrgroupport = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 11, 3))
rptrgroupmodule = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 11, 4))
rptrRxDscrptrOverFlow = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrRxDscrptrOverFlow.setStatus('mandatory')
if mibBuilder.loadTexts: rptrRxDscrptrOverFlow.setDescription('This counter reflects the number of the missed received packets due to lack of resourcees such as descriptors or memory buffers')
rptrTxDscrptrOverFlow = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrTxDscrptrOverFlow.setStatus('mandatory')
if mibBuilder.loadTexts: rptrTxDscrptrOverFlow.setDescription('This counter is incremented evry time there is a transmit over flow')
rptrMemoryErrors = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrMemoryErrors.setStatus('mandatory')
if mibBuilder.loadTexts: rptrMemoryErrors.setDescription('This counter is incremented evry time there is a memory error')
rptrJabberCounter = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrJabberCounter.setStatus('mandatory')
if mibBuilder.loadTexts: rptrJabberCounter.setDescription('This counter is incremented evry time there is a jubber in one of the ports.')
rptrNMSConnectionPort = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrNMSConnectionPort.setStatus('mandatory')
if mibBuilder.loadTexts: rptrNMSConnectionPort.setDescription('Returns the port number which the NMS is connected.')
rptrEDBPort = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrEDBPort.setStatus('mandatory')
if mibBuilder.loadTexts: rptrEDBPort.setDescription('Returns the port number which the MultiHub (EDB) is connected to. if the MultiHub is not connected to the card the value returned will be 99, if the card is installed in a stand alone chassis then reading this object will return 99')
rptrfmGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1), )
if mibBuilder.loadTexts: rptrfmGroupTable.setStatus('mandatory')
rptrfmGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1), ).setIndexNames((0, "Hub-rptr-prvt", "rptrGroupIndex"))
if mibBuilder.loadTexts: rptrfmGroupEntry.setStatus('mandatory')
rptrGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupIndex.setDescription('Group Number')
rptrGroupGlobalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupGlobalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupGlobalStatus.setDescription('8 bytes. 60 status bits of the card. For more information about the meaning of the status, read the specific user manual of each card. The channel leds are encoded into 2 bytes.')
rptrGroupPrevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPrevStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupPrevStatus.setDescription('8 bytes. Previous 60 status bits of the card. This object id is used mainly for traps (see Card Trap)')
rptrGroupGlobalError = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault-exist", 1), ("no-fault-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupGlobalError.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupGlobalError.setDescription('Group Global Fault status. If the value is one - there is a fault in the card.')
rptrGroupJabberError = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault-exist", 1), ("no-fault-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupJabberError.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupJabberError.setDescription('Jabber Fault status. If the value is one - there is a jabber event.')
rptrGroupCpuError = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault-exist", 1), ("no-fault-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupCpuError.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupCpuError.setDescription('CPU Fault status. If the value is one - there is a CPU fault in the card.')
rptrGroupSQE = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault-exist", 1), ("no-fault-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupSQE.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupSQE.setDescription('Group SQE Fault status (for AUI module (339)). If the value is one - there is an SQE indication to the card.')
rptrGroupRepeaterBlockError = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault-exist", 1), ("no-fault-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupRepeaterBlockError.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupRepeaterBlockError.setDescription('Repeater Block Fault status. If the value is one - there is a fault in the repeater block.')
rptrGroupAutoPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault-exist", 1), ("no-fault-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupAutoPartition.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupAutoPartition.setDescription('Group Auto partition Fault status. If the value is one - at least one of the ports is in auto-partition.')
rptrGroupDetachStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detach-exist", 1), ("no-detach-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupDetachStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupDetachStatus.setDescription('Global Detach status. If the value is one - at least one of the ports is detached.')
rptrGroupGlobalCommandCode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("attach-all-ports", 1), ("detach-all-ports", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrGroupGlobalCommandCode.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupGlobalCommandCode.setDescription('Enable the user to attach/detach all repeater ports. Note: in case off detach command - all port will detach except the port on which the last NMS message was received. when reading this object the value returned is always attach-all-ports(1)')
rptrGroupTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mask-all", 1), ("mask-fatal", 2), ("mask-warn", 3), ("mask-info", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrGroupTrapMask.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupTrapMask.setDescription('When setting this variable to mask-info(4) then only all traps will be sent. When setting this variable to mask-warn(3) then only traps with severity of warn or fatal will be sent.When setting this variable to mask-fatal(2) then only traps with severity of fatal will be sent. When setting this variable to mask-all(1) then no traps will be sent.')
rptrGroupLinkSelectHead1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("toggle-link-select", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrGroupLinkSelectHead1.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupLinkSelectHead1.setDescription('Enable the user to switch between MAIN and SECOND link only in Head module in the 303 type cards.')
rptrGroupBackupHead1State = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("normal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrGroupBackupHead1State.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupBackupHead1State.setDescription('Enable the user to enable or disable the backup port for Head module only in 303 cards. when set to enabled(1) the active port will be the primary port, when set to disabled(2) the active port will be the secondary port and when set to normal(3) the active port will be set by the backup algorithm')
rptrGroupTailState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrGroupTailState.setStatus('deprecated')
if mibBuilder.loadTexts: rptrGroupTailState.setDescription('Enable the user to enable or disable Tail in 303 card')
rptrGroupMaxModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupMaxModuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupMaxModuleNumber.setDescription('Maximum Number of modules in a group.')
rptrGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1), )
if mibBuilder.loadTexts: rptrGroupPortTable.setStatus('mandatory')
rptrGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "Hub-rptr-prvt", "rptrGroupPIndex"), (0, "Hub-rptr-prvt", "rptrGroupPortIndex"))
if mibBuilder.loadTexts: rptrGroupPortEntry.setStatus('mandatory')
rptrGroupPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupPIndex.setDescription('Group Number')
rptrGroupPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupPortIndex.setDescription('Port Number')
rptrGroupPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("link-ok", 1), ("link-not-ok", 2), ("link-not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPortLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupPortLinkStatus.setDescription('When the value is 1, link status is O.K.')
rptrGroupPortRcvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("receive", 1), ("no-receive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPortRcvStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupPortRcvStatus.setDescription('This object describes the receive status of the port, When a port is receiveing data the object gets the value receive(1), when the port does not receive any data the object gets the value no-receive(2)')
rptrGroupPortLinkFaultCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPortLinkFaultCounter.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupPortLinkFaultCounter.setDescription('This counter is incremented evry time a link change is detected in the port. A link change is encountered on the port whenever the link is disappearing or apearing on the port')
rptrGroupPortAutoPartitionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPortAutoPartitionCount.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupPortAutoPartitionCount.setDescription('This counter is incremented evry time there is a Auto Partition state in the port.')
rptrGroupPortAutoPartitionType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("collision-limit", 1), ("collision-length-limit", 2), ("loopback-failure", 3), ("cpu-forced-reconnection", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupPortAutoPartitionType.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupPortAutoPartitionType.setDescription('Auto Partition type.')
rptrGroupModuleTable = MibTable((1, 3, 6, 1, 4, 1, 22, 51, 11, 4, 1), )
if mibBuilder.loadTexts: rptrGroupModuleTable.setStatus('mandatory')
rptrGroupModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 51, 11, 4, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "Hub-rptr-prvt", "rptrGroupMIndex"), (0, "Hub-rptr-prvt", "rptrGroupModuleIndex"))
if mibBuilder.loadTexts: rptrGroupModuleEntry.setStatus('mandatory')
rptrGroupMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupMIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupMIndex.setDescription('Group Number')
rptrGroupModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupModuleIndex.setDescription('Module Number')
rptrGroupModuleStructInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("em892-330-blank", 1), ("em892-331-fo1", 2), ("em892-332-fo2", 3), ("em892-333-cx1", 4), ("em892-334-cx2", 5), ("em892-332b-fo2b", 6), ("em892-335-tp1", 7), ("em892-337-dte", 8), ("em892-336-tp2", 9), ("em892-339-aui", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrGroupModuleStructInfo.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupModuleStructInfo.setDescription(' List of modules numnbers: eM892.330 /* BLANK */ EM892.331 /* FO single port */ EM892.332 /* FO dual port */ EM892.333 /* COAX single port */ EM892.334 /* COAX dual port */ EM892.332B /* FO dual port for Dual Homing */ EM892.335 /* 10BASET single port */ EM892.337 /* DTE */ EM892.336 /* 10BASET dual port */ EM892.339 /* AUI */')
rptrGroupModuleBackupState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 11, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("hardware", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrGroupModuleBackupState.setStatus('mandatory')
if mibBuilder.loadTexts: rptrGroupModuleBackupState.setDescription('Enable the user to overide the backup switch (enable/disable). or let the state be as the switch is (hardware) This object applies only to the 308 card. setting this object will take effect only after the next reset or power up of the card.')
rptrGroupPortStatus = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,1)).setObjects(("SNMP-REPEATER-MIB", "rptrPortGroupIndex"), ("SNMP-REPEATER-MIB", "rptrPortIndex"), ("SNMP-REPEATER-MIB", "rptrPortAdminStatus"))
if mibBuilder.loadTexts: rptrGroupPortStatus.setDescription('Issued when the port changed its status')
rptrGroupJabberFaultStatus = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,2)).setObjects(("Hub-rptr-prvt", "rptrGroupIndex"), ("Hub-rptr-prvt", "rptrGroupPortIndex"), ("Hub-rptr-prvt", "rptrGroupJabberError"))
if mibBuilder.loadTexts: rptrGroupJabberFaultStatus.setDescription('Issued when the port enters the jabber lock state')
rptrGroupCPUFaultStatus = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,3)).setObjects(("Hub-rptr-prvt", "rptrGroupIndex"), ("Hub-rptr-prvt", "rptrGroupCpuError"))
if mibBuilder.loadTexts: rptrGroupCPUFaultStatus.setDescription('Issued when a CPU fault is detected')
rptrGroupSQEStatus = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,4)).setObjects(("Hub-rptr-prvt", "rptrGroupIndex"), ("Hub-rptr-prvt", "rptrGroupPortIndex"), ("Hub-rptr-prvt", "rptrGroupSQE"))
if mibBuilder.loadTexts: rptrGroupSQEStatus.setDescription('Issued when a SQE error is detected')
rptrGroupRepeaterBlockFaultStatus = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,5)).setObjects(("Hub-rptr-prvt", "rptrGroupIndex"), ("Hub-rptr-prvt", "rptrGroupRepeaterBlockError"))
if mibBuilder.loadTexts: rptrGroupRepeaterBlockFaultStatus.setDescription('Issued when a repeater block error is detected')
rptrGroupPortAutoPartitionStatus = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,6)).setObjects(("Hub-rptr-prvt", "rptrGroupPIndex"), ("Hub-rptr-prvt", "rptrGroupPortIndex"), ("Hub-rptr-prvt", "rptrGroupPortAutoPartitionType"))
if mibBuilder.loadTexts: rptrGroupPortAutoPartitionStatus.setDescription('Issued when the port is auto partitioned')
rptrGroupTrap = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,7)).setObjects(("Hub-rptr-prvt", "rptrGroupIndex"), ("Hub-rptr-prvt", "rptrGroupGlobalStatus"), ("Hub-rptr-prvt", "rptrGroupPrevStatus"))
if mibBuilder.loadTexts: rptrGroupTrap.setDescription('Generated when a significant status has changed in a group. By xoring the 2 statuses, the NMS can identify the cause of the trap.')
rptrGroupPortLinkStatus2 = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,8)).setObjects(("SNMP-REPEATER-MIB", "rptrPortGroupIndex"), ("SNMP-REPEATER-MIB", "rptrPortIndex"), ("Hub-rptr-prvt", "rptrGroupPortLinkStatus"))
if mibBuilder.loadTexts: rptrGroupPortLinkStatus2.setDescription('Issued when the link status of the port changed its status')
rptrGroupDetachNmsPort = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,9)).setObjects(("Hub-rptr-prvt", "rptrNMSConnectionPort"))
if mibBuilder.loadTexts: rptrGroupDetachNmsPort.setDescription('Issued when the port connected to the NMS Is not dettached by a detach command received from the NMS')
rptrGroupHead1BackupMainActive = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,10)).setObjects(("Hub-rptr-prvt", "rptrGroupIndex"))
if mibBuilder.loadTexts: rptrGroupHead1BackupMainActive.setDescription('Indicates that the MAIN link is active')
rptrGroupHead1BackupSecondActive = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,11)).setObjects(("Hub-rptr-prvt", "rptrGroupIndex"))
if mibBuilder.loadTexts: rptrGroupHead1BackupSecondActive.setDescription('Indicates that the SECOND link is active')
rptrGroupDetachEdbPort = NotificationType((1, 3, 6, 1, 4, 1, 22, 51, 11) + (0,12)).setObjects(("Hub-rptr-prvt", "rptrEDBPort"))
if mibBuilder.loadTexts: rptrGroupDetachEdbPort.setDescription('Issued when the port connected to the EDB Is not dettached by a detach command received from the NMS')
mibBuilder.exportSymbols("Hub-rptr-prvt", rptrGroupGlobalStatus=rptrGroupGlobalStatus, rptrGroupJabberError=rptrGroupJabberError, rptrGroupMIndex=rptrGroupMIndex, rptrGroupPortTable=rptrGroupPortTable, rptrTxDscrptrOverFlow=rptrTxDscrptrOverFlow, rptrGroupModuleBackupState=rptrGroupModuleBackupState, rptrGroupTrapMask=rptrGroupTrapMask, rptrGroupPortAutoPartitionCount=rptrGroupPortAutoPartitionCount, rptrGroupHead1BackupSecondActive=rptrGroupHead1BackupSecondActive, rptrinfo=rptrinfo, rptrGroupPortAutoPartitionStatus=rptrGroupPortAutoPartitionStatus, rptrGroupPortEntry=rptrGroupPortEntry, fmslot=fmslot, rptrfmGroupEntry=rptrfmGroupEntry, rptrGroupLinkSelectHead1=rptrGroupLinkSelectHead1, rptrgroup=rptrgroup, traprun=traprun, rptrGroupCpuError=rptrGroupCpuError, rptrGroupModuleTable=rptrGroupModuleTable, rptrGroupCPUFaultStatus=rptrGroupCPUFaultStatus, rptrgroupport=rptrgroupport, rptrGroupHead1BackupMainActive=rptrGroupHead1BackupMainActive, rptrGroupPortRcvStatus=rptrGroupPortRcvStatus, rptrGroupSQE=rptrGroupSQE, rptrNMSConnectionPort=rptrNMSConnectionPort, rptrGroupPortLinkFaultCounter=rptrGroupPortLinkFaultCounter, fmsystemrun=fmsystemrun, rptrGroupModuleStructInfo=rptrGroupModuleStructInfo, rptrGroupPortLinkStatus=rptrGroupPortLinkStatus, rptrGroupJabberFaultStatus=rptrGroupJabberFaultStatus, rptrGroupMaxModuleNumber=rptrGroupMaxModuleNumber, rptrGroupSQEStatus=rptrGroupSQEStatus, rptrGroupModuleIndex=rptrGroupModuleIndex, rptrGroupPortIndex=rptrGroupPortIndex, fmsystem=fmsystem, fmdebug=fmdebug, rptrGroupTrap=rptrGroupTrap, rptrgroupmodule=rptrgroupmodule, rptrGroupRepeaterBlockFaultStatus=rptrGroupRepeaterBlockFaultStatus, traperm=traperm, fm800=fm800, rptrGroupTailState=rptrGroupTailState, rptrGroupDetachEdbPort=rptrGroupDetachEdbPort, fmlu=fmlu, trap=trap, rptrfmGroupTable=rptrfmGroupTable, rptrGroupIndex=rptrGroupIndex, rptrGroupPIndex=rptrGroupPIndex, fmsystemperm=fmsystemperm, private=private, rptrJabberCounter=rptrJabberCounter, enterprises=enterprises, fibronics=fibronics, rptrGroupRepeaterBlockError=rptrGroupRepeaterBlockError, rptrGroupModuleEntry=rptrGroupModuleEntry, rptrGroupPortLinkStatus2=rptrGroupPortLinkStatus2, rptrRxDscrptrOverFlow=rptrRxDscrptrOverFlow, rptrEDBPort=rptrEDBPort, rptrGroupDetachNmsPort=rptrGroupDetachNmsPort, rptrGroupPrevStatus=rptrGroupPrevStatus, rptrMemoryErrors=rptrMemoryErrors, fmdiag=fmdiag, fmethrptr=fmethrptr, rptrGroupGlobalError=rptrGroupGlobalError, rptrGroupAutoPartition=rptrGroupAutoPartition, rptrGroupDetachStatus=rptrGroupDetachStatus, trapvar=trapvar, rptrGroupPortStatus=rptrGroupPortStatus, rptrGroupGlobalCommandCode=rptrGroupGlobalCommandCode, rptrGroupBackupHead1State=rptrGroupBackupHead1State, rptrGroupPortAutoPartitionType=rptrGroupPortAutoPartitionType)
