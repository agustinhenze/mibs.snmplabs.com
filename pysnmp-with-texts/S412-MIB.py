#
# PySNMP MIB module S412-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/S412-MIB
# Produced by pysmi-0.3.4 at Fri Jan 31 21:35:47 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
private, Integer32, NotificationType, Counter32, Unsigned32, enterprises, Bits, TimeTicks, internet, ModuleIdentity, iso, IpAddress, MibIdentifier, ObjectIdentity, mgmt, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "private", "Integer32", "NotificationType", "Counter32", "Unsigned32", "enterprises", "Bits", "TimeTicks", "internet", "ModuleIdentity", "iso", "IpAddress", "MibIdentifier", "ObjectIdentity", "mgmt", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
asentria = MibIdentifier((1, 3, 6, 1, 4, 1, 3052))
s412 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41))
device = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 1))
contacts = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 2))
relays = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 3))
tempsensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 4))
humiditysensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 5))
passthrough = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 6))
ftp = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 7))
analog = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 8))
eventSensorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 10))
eventSensorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 11))
techsupport = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 99))
mibend = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 100))
contact1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 2, 1))
contact2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 2, 2))
contact3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 2, 3))
contact4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 2, 4))
contact5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 2, 5))
contact6 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 2, 6))
relay1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 3, 1))
relay2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 3, 2))
analog1 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1))
analog2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2))
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: serialNumber.setDescription('8-character serial number')
firmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: firmwareVersion.setDescription('Firmware version text string')
siteID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteID.setStatus('mandatory')
if mibBuilder.loadTexts: siteID.setDescription('Site Identifier, up to 12 characters.')
snmpManager = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManager.setStatus('deprecated')
if mibBuilder.loadTexts: snmpManager.setDescription('This is snmp manager #1 ')
forceTraps = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceTraps.setStatus('mandatory')
if mibBuilder.loadTexts: forceTraps.setDescription('Any write non-zero forces set of traps to be send to the SNMP Manager')
thisTrapText = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: thisTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: thisTrapText.setDescription('A text string included in all traps')
alarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alarmStatus.setDescription('A text status of all alarms')
snmpManager1 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManager1.setStatus('mandatory')
if mibBuilder.loadTexts: snmpManager1.setDescription('SNMP manager #1 ')
snmpManager2 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManager2.setStatus('mandatory')
if mibBuilder.loadTexts: snmpManager2.setDescription('SNMP manager #2 ')
snmpManager3 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManager3.setStatus('mandatory')
if mibBuilder.loadTexts: snmpManager3.setDescription('SNMP manager #3 ')
snmpManager4 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManager4.setStatus('mandatory')
if mibBuilder.loadTexts: snmpManager4.setDescription('SNMP manager #4 ')
statusRepeatHours = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statusRepeatHours.setStatus('mandatory')
if mibBuilder.loadTexts: statusRepeatHours.setDescription('0=none, 1-24 Number of Hours between Status Traps being Sent')
serialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: serialTimeout.setDescription('5-30, Minutes of non-activity timeout on serial setup')
powerupTrapsend = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerupTrapsend.setStatus('mandatory')
if mibBuilder.loadTexts: powerupTrapsend.setDescription('0-no, 1-yes, send traps for all sensors on powerup')
netlossTrapsend = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netlossTrapsend.setStatus('mandatory')
if mibBuilder.loadTexts: netlossTrapsend.setDescription('0-no, 1-yes, send traps for detected netloss and back up')
buildID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: buildID.setStatus('mandatory')
if mibBuilder.loadTexts: buildID.setDescription('5-chars max text for build identifier')
contact1Name = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact1Name.setStatus('mandatory')
if mibBuilder.loadTexts: contact1Name.setDescription('Name for contact, up to 30 characters')
contact1State = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contact1State.setStatus('mandatory')
if mibBuilder.loadTexts: contact1State.setDescription('Current State of Contact, 0-open 1-closed')
contact1AlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact1AlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: contact1AlarmEnable.setDescription('0-alarms disabled 1-alarms enabled')
contact1ActiveDirection = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact1ActiveDirection.setStatus('mandatory')
if mibBuilder.loadTexts: contact1ActiveDirection.setDescription('0-alarm on open 1-alarm on closed')
contact1Threshold = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact1Threshold.setStatus('mandatory')
if mibBuilder.loadTexts: contact1Threshold.setDescription('Number of seconds that the contact must remain in a state before generating a trap, range 0-255')
contact1ReturnNormalTrap = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact1ReturnNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: contact1ReturnNormalTrap.setDescription('0-return to normal traps not sent, 1-sent')
contact1TrapRepeat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact1TrapRepeat.setStatus('mandatory')
if mibBuilder.loadTexts: contact1TrapRepeat.setDescription('0-no repeats. 1-255 number of minutes between repeats of alarm traps.')
contact1Severity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact1Severity.setStatus('mandatory')
if mibBuilder.loadTexts: contact1Severity.setDescription('1-minor 2-major 3-critical 4-severe 5-warning')
contact2Name = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact2Name.setStatus('mandatory')
if mibBuilder.loadTexts: contact2Name.setDescription('Name for contact, up to 30 characters')
contact2State = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contact2State.setStatus('mandatory')
if mibBuilder.loadTexts: contact2State.setDescription('Current State of Contact, 0-open 1-closed')
contact2AlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact2AlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: contact2AlarmEnable.setDescription('0-no alarms 1-alarms enabled')
contact2ActiveDirection = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact2ActiveDirection.setStatus('mandatory')
if mibBuilder.loadTexts: contact2ActiveDirection.setDescription('0-alarm on open 1-alarm on closed')
contact2Threshold = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact2Threshold.setStatus('mandatory')
if mibBuilder.loadTexts: contact2Threshold.setDescription("Number of seconds must be in a state to be 'open' or 'closed'")
contact2ReturnNormalTrap = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact2ReturnNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: contact2ReturnNormalTrap.setDescription('0-not sent, 1-sent')
contact2TrapRepeat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact2TrapRepeat.setStatus('mandatory')
if mibBuilder.loadTexts: contact2TrapRepeat.setDescription('0-no repeats. 1-255 number of minutes between repeats of alarm traps')
contact2Severity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact2Severity.setStatus('mandatory')
if mibBuilder.loadTexts: contact2Severity.setDescription('1-minor 2-major 3-critical 4-severe 5-warning')
contact3Name = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact3Name.setStatus('mandatory')
if mibBuilder.loadTexts: contact3Name.setDescription('Name for contact, up to 30 characters')
contact3State = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contact3State.setStatus('mandatory')
if mibBuilder.loadTexts: contact3State.setDescription('Current State of Contact, 0-open 1-closed')
contact3AlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact3AlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: contact3AlarmEnable.setDescription('0-no alarms 1-alarms enabled')
contact3ActiveDirection = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact3ActiveDirection.setStatus('mandatory')
if mibBuilder.loadTexts: contact3ActiveDirection.setDescription('0-alarm on open 1-alarm on closed')
contact3Threshold = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact3Threshold.setStatus('mandatory')
if mibBuilder.loadTexts: contact3Threshold.setDescription("Number of seconds must be in a state to be 'open' or 'closed'")
contact3ReturnNormalTrap = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact3ReturnNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: contact3ReturnNormalTrap.setDescription('0-not sent, 1-sent')
contact3TrapRepeat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact3TrapRepeat.setStatus('mandatory')
if mibBuilder.loadTexts: contact3TrapRepeat.setDescription('0-no repeats. 1-255 number of minutes between repeats of alarm traps')
contact3Severity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact3Severity.setStatus('mandatory')
if mibBuilder.loadTexts: contact3Severity.setDescription('1-minor 2-major 3-critical 4-severe 5-warning')
contact4Name = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact4Name.setStatus('mandatory')
if mibBuilder.loadTexts: contact4Name.setDescription('Name for contact, up to 30 characters')
contact4State = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contact4State.setStatus('mandatory')
if mibBuilder.loadTexts: contact4State.setDescription('Current State of Contact, 0-open 1-closed')
contact4AlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact4AlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: contact4AlarmEnable.setDescription('0-no alarms 1-alarms enabled')
contact4ActiveDirection = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact4ActiveDirection.setStatus('mandatory')
if mibBuilder.loadTexts: contact4ActiveDirection.setDescription('0-alarm on open 1-alarm on closed')
contact4Threshold = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact4Threshold.setStatus('mandatory')
if mibBuilder.loadTexts: contact4Threshold.setDescription("Number of seconds must be in a state to be 'open' or 'closed'")
contact4ReturnNormalTrap = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact4ReturnNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: contact4ReturnNormalTrap.setDescription('0-not sent, 1-sent')
contact4TrapRepeat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact4TrapRepeat.setStatus('mandatory')
if mibBuilder.loadTexts: contact4TrapRepeat.setDescription('0-no repeats. 1-255 number of minutes between repeats of alarm traps')
contact4Severity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact4Severity.setStatus('mandatory')
if mibBuilder.loadTexts: contact4Severity.setDescription('1-minor 2-major 3-critical 4-severe 5-warning')
contact5Name = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact5Name.setStatus('mandatory')
if mibBuilder.loadTexts: contact5Name.setDescription('Name for contact, up to 30 characters')
contact5State = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contact5State.setStatus('mandatory')
if mibBuilder.loadTexts: contact5State.setDescription('Current State of Contact, 0-open 1-closed')
contact5AlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact5AlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: contact5AlarmEnable.setDescription('0-no alarms 1-alarms enabled')
contact5ActiveDirection = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact5ActiveDirection.setStatus('mandatory')
if mibBuilder.loadTexts: contact5ActiveDirection.setDescription('0-alarm on open 1-alarm on closed')
contact5Threshold = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact5Threshold.setStatus('mandatory')
if mibBuilder.loadTexts: contact5Threshold.setDescription("Number of seconds must be in a state to be 'open' or 'closed'")
contact5ReturnNormalTrap = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact5ReturnNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: contact5ReturnNormalTrap.setDescription('0-not sent, 1-sent')
contact5TrapRepeat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact5TrapRepeat.setStatus('mandatory')
if mibBuilder.loadTexts: contact5TrapRepeat.setDescription('0-no repeats. 1-255 number of minutes between repeats of alarm traps')
contact5Severity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact5Severity.setStatus('mandatory')
if mibBuilder.loadTexts: contact5Severity.setDescription('1-minor 2-major 3-critical 4-severe 5-warning')
contact6Name = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact6Name.setStatus('mandatory')
if mibBuilder.loadTexts: contact6Name.setDescription('Name for contact, up to 30 characters')
contact6State = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contact6State.setStatus('mandatory')
if mibBuilder.loadTexts: contact6State.setDescription('Current State of Contact, 0-open 1-closed')
contact6AlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact6AlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: contact6AlarmEnable.setDescription('0-no alarms 1-alarms enabled')
contact6ActiveDirection = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact6ActiveDirection.setStatus('mandatory')
if mibBuilder.loadTexts: contact6ActiveDirection.setDescription('0-alarm on open 1-alarm on closed')
contact6Threshold = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact6Threshold.setStatus('mandatory')
if mibBuilder.loadTexts: contact6Threshold.setDescription("Number of seconds must be in a state to be 'open' or 'closed'")
contact6ReturnNormalTrap = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact6ReturnNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: contact6ReturnNormalTrap.setDescription('0-not sent, 1-sent')
contact6TrapRepeat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact6TrapRepeat.setStatus('mandatory')
if mibBuilder.loadTexts: contact6TrapRepeat.setDescription('0-no repeats. 1-255 number of minutes between repeats of alarm traps.')
contact6Severity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 2, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: contact6Severity.setStatus('mandatory')
if mibBuilder.loadTexts: contact6Severity.setDescription('1-minor 2-major 3-critical 4-severe 5-warning')
relay1Name = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay1Name.setStatus('mandatory')
if mibBuilder.loadTexts: relay1Name.setDescription('Name for relay, up to 30 characters')
relay1CurrentState = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay1CurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: relay1CurrentState.setDescription('0-opened, 1-closed')
relay1PowerupState = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay1PowerupState.setStatus('mandatory')
if mibBuilder.loadTexts: relay1PowerupState.setDescription('0-opened, 1-closed')
relay2Name = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 3, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay2Name.setStatus('mandatory')
if mibBuilder.loadTexts: relay2Name.setDescription('Name for relay, up to 30 characters')
relay2CurrentState = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 3, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay2CurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: relay2CurrentState.setDescription('0-opened, 1-closed')
relay2PowerupState = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 3, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relay2PowerupState.setStatus('mandatory')
if mibBuilder.loadTexts: relay2PowerupState.setDescription('0-opened, 1-closed')
tempValue = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempValue.setStatus('mandatory')
if mibBuilder.loadTexts: tempValue.setDescription('Current Temperature Value, in C or F based on 1.3.6.1.4.1.3052.41.4.10')
tempAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: tempAlarmEnable.setDescription('0=alarms disabled, 1=alarms enabled')
tempHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHighLevel.setStatus('mandatory')
if mibBuilder.loadTexts: tempHighLevel.setDescription('Level at which the High alarm goes active')
tempVeryHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempVeryHighLevel.setStatus('mandatory')
if mibBuilder.loadTexts: tempVeryHighLevel.setDescription('Level at which the Very High alarm goes active')
tempLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowLevel.setStatus('mandatory')
if mibBuilder.loadTexts: tempLowLevel.setDescription('Level at which the Low alarm goes active')
tempVeryLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempVeryLowLevel.setStatus('mandatory')
if mibBuilder.loadTexts: tempVeryLowLevel.setDescription('Level at which the Very Low alarm goes active')
tempAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: tempAlarmThreshold.setDescription('Seconds must be in a range to be an alarm')
tempReturnNormalTrap = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempReturnNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: tempReturnNormalTrap.setDescription('0-not sent, 1-send trap on return to normal range')
tempTrapRepeat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempTrapRepeat.setStatus('mandatory')
if mibBuilder.loadTexts: tempTrapRepeat.setDescription('0-no repeats. 1-255 number of minutes between repeats of alarm traps.')
tempMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempMode.setStatus('mandatory')
if mibBuilder.loadTexts: tempMode.setDescription('0=all temp readings and levels in degrees F, 1=in degrees C')
tempHighSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempHighSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: tempHighSeverity.setDescription('High Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
tempVeryHighSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempVeryHighSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: tempVeryHighSeverity.setDescription('Very High Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
tempLowSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempLowSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: tempLowSeverity.setDescription('Low Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
tempVeryLowSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempVeryLowSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: tempVeryLowSeverity.setDescription('Very Low Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
tempName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 4, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempName.setStatus('mandatory')
if mibBuilder.loadTexts: tempName.setDescription('Name for temperature sensor, up to 30 characters')
humidityValue = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: humidityValue.setStatus('mandatory')
if mibBuilder.loadTexts: humidityValue.setDescription('Current Relative Humidity Value (0-100%)')
humidityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: humidityAlarmEnable.setDescription('0=alarms disabled, 1=alarms enabled')
humidityHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityHighLevel.setStatus('mandatory')
if mibBuilder.loadTexts: humidityHighLevel.setDescription('Level at which the High alarm goes active')
humidityVeryHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityVeryHighLevel.setStatus('mandatory')
if mibBuilder.loadTexts: humidityVeryHighLevel.setDescription('Level at which the Very High alarm goes active')
humidityLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowLevel.setStatus('mandatory')
if mibBuilder.loadTexts: humidityLowLevel.setDescription('Level at which the Low alarm goes active')
humidityVeryLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityVeryLowLevel.setStatus('mandatory')
if mibBuilder.loadTexts: humidityVeryLowLevel.setDescription('Level at which the Very Low alarm goes active')
humidityAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: humidityAlarmThreshold.setDescription('Seconds must be in a range to be an alarm')
humidityReturnNormalTrap = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityReturnNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: humidityReturnNormalTrap.setDescription('0-not sent, 1-send trap on return to normal range')
humidityTrapRepeat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityTrapRepeat.setStatus('mandatory')
if mibBuilder.loadTexts: humidityTrapRepeat.setDescription('0-no repeats. 1-255 number of minutes between repeats of alarm traps.')
humidityHighSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityHighSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: humidityHighSeverity.setDescription('High Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
humidityVeryHighSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 5, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityVeryHighSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: humidityVeryHighSeverity.setDescription('Very High Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
humidityLowSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 5, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityLowSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: humidityLowSeverity.setDescription('Low Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
humidityVeryLowSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 5, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityVeryLowSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: humidityVeryLowSeverity.setDescription('Very Low Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
humidityName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 5, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: humidityName.setStatus('mandatory')
if mibBuilder.loadTexts: humidityName.setDescription('Name for humidity sensor, up to 30 characters')
ptNeedPassword = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptNeedPassword.setStatus('mandatory')
if mibBuilder.loadTexts: ptNeedPassword.setDescription('0-no 1-yes, is password required for passthrough connection.')
ptSayLoginText = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptSayLoginText.setStatus('mandatory')
if mibBuilder.loadTexts: ptSayLoginText.setDescription('0-no 1-yes, is passthrough login text displayed on connection.')
ptLoginText = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptLoginText.setStatus('mandatory')
if mibBuilder.loadTexts: ptLoginText.setDescription('0-24 char string which may be displayed on socket connection. Requires that ptSayLoginText be enabled to display this string.')
ptSaySiteID = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptSaySiteID.setStatus('mandatory')
if mibBuilder.loadTexts: ptSaySiteID.setDescription('0-no 1-yes, is SiteID displayed on pass through connection.')
ptUsername = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptUsername.setStatus('mandatory')
if mibBuilder.loadTexts: ptUsername.setDescription('0-16 char string for Username used in serial passthrough connections')
ptPassword = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 6, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptPassword.setStatus('mandatory')
if mibBuilder.loadTexts: ptPassword.setDescription('0-16 char string for Password used in serial passthrough connections')
ptTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ptTimeout.setDescription('number of minutes (1-255) of idle activity (both directions) which causes disconnect. 0-never')
ptEscChar = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptEscChar.setStatus('mandatory')
if mibBuilder.loadTexts: ptEscChar.setDescription('ASCII character code (e.g, Escape=27) which if entered on the tcp port three times in a row causes disconnect. 0-none')
ptLfstripToPort = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 6, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptLfstripToPort.setStatus('mandatory')
if mibBuilder.loadTexts: ptLfstripToPort.setDescription('0-no 1-yes linefeed characters received on TCP connection are removed from stream to serial port')
ptLfstripFromPort = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptLfstripFromPort.setStatus('mandatory')
if mibBuilder.loadTexts: ptLfstripFromPort.setDescription('0-no 1-yes linefeed characters received on serial port are removed from stream to TCP connection')
ptSerialBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 6, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptSerialBaudrate.setStatus('mandatory')
if mibBuilder.loadTexts: ptSerialBaudrate.setDescription('300 600 1200 2400 4800 9600 19200 baud are allowed values')
ptSerialWordlength = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 6, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptSerialWordlength.setStatus('mandatory')
if mibBuilder.loadTexts: ptSerialWordlength.setDescription('7 or 8 bit word selection')
ptSerialParity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 6, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptSerialParity.setStatus('mandatory')
if mibBuilder.loadTexts: ptSerialParity.setDescription('N E O are allowed values for parity (none, even, odd) [a single-character string]')
ptTCPPortnumber = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 6, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ptTCPPortnumber.setStatus('mandatory')
if mibBuilder.loadTexts: ptTCPPortnumber.setDescription('IP port number for passthrough connection (range 1024-65534)')
ftpUsername = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 7, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpUsername.setStatus('mandatory')
if mibBuilder.loadTexts: ftpUsername.setDescription('0-16 char string for Username used in ftp server for updates')
ftpPassword = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPassword.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPassword.setDescription('0-16 char string for Password used in ftp server for updates')
analog1Value = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analog1Value.setStatus('mandatory')
if mibBuilder.loadTexts: analog1Value.setDescription('Value of current analog reading, in 1/100 volt, +- 9999 range')
analog1AlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog1AlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: analog1AlarmEnable.setDescription('0=no alarms, 1=send alarms')
analog1HighLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog1HighLevel.setStatus('mandatory')
if mibBuilder.loadTexts: analog1HighLevel.setDescription('Level at which the High alarm goes active')
analog1VeryHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog1VeryHighLevel.setStatus('mandatory')
if mibBuilder.loadTexts: analog1VeryHighLevel.setDescription('Level at which the Very High alarm goes active')
analog1LowLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog1LowLevel.setStatus('mandatory')
if mibBuilder.loadTexts: analog1LowLevel.setDescription('Level at which the Low alarm goes active')
analog1VeryLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog1VeryLowLevel.setStatus('mandatory')
if mibBuilder.loadTexts: analog1VeryLowLevel.setDescription('Level at which the Very Low alarm goes active')
analog1AlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog1AlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: analog1AlarmThreshold.setDescription('Seconds must be in a range to be an alarm')
analog1ReturnNormalTrap = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog1ReturnNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: analog1ReturnNormalTrap.setDescription('0-not sent, 1-send trap on return to normal range')
analog1TrapRepeat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog1TrapRepeat.setStatus('mandatory')
if mibBuilder.loadTexts: analog1TrapRepeat.setDescription('0-no repeats else number of minutes between repeats of trap')
analog1HighSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog1HighSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: analog1HighSeverity.setDescription('High Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
analog1VeryHighSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog1VeryHighSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: analog1VeryHighSeverity.setDescription('Very High Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
analog1LowSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog1LowSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: analog1LowSeverity.setDescription('Low Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
analog1VeryLowSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog1VeryLowSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: analog1VeryLowSeverity.setDescription('Very Low Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
analog1Name = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog1Name.setStatus('mandatory')
if mibBuilder.loadTexts: analog1Name.setDescription('Name for analog sensor 1, up to 30 characters')
analog2Value = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analog2Value.setStatus('mandatory')
if mibBuilder.loadTexts: analog2Value.setDescription('Value of current analog reading, in 1/100 volt, +- 9999 range')
analog2AlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog2AlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: analog2AlarmEnable.setDescription('0=no alarms, 1=send alarms')
analog2HighLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog2HighLevel.setStatus('mandatory')
if mibBuilder.loadTexts: analog2HighLevel.setDescription('Level at which the High alarm goes active')
analog2VeryHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog2VeryHighLevel.setStatus('mandatory')
if mibBuilder.loadTexts: analog2VeryHighLevel.setDescription('Level at which the Very High alarm goes active')
analog2LowLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog2LowLevel.setStatus('mandatory')
if mibBuilder.loadTexts: analog2LowLevel.setDescription('Level at which the Low alarm goes active')
analog2VeryLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog2VeryLowLevel.setStatus('mandatory')
if mibBuilder.loadTexts: analog2VeryLowLevel.setDescription('Level at which the Very Low alarm goes active')
analog2AlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog2AlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: analog2AlarmThreshold.setDescription('Seconds must be in a range to be an alarm')
analog2ReturnNormalTrap = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog2ReturnNormalTrap.setStatus('mandatory')
if mibBuilder.loadTexts: analog2ReturnNormalTrap.setDescription('0-not sent, 1-send trap on return to normal range')
analog2TrapRepeat = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog2TrapRepeat.setStatus('mandatory')
if mibBuilder.loadTexts: analog2TrapRepeat.setDescription('0-no repeats else number of minutes between repeats of trap')
analog2HighSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog2HighSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: analog2HighSeverity.setDescription('High Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
analog2VeryHighSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog2VeryHighSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: analog2VeryHighSeverity.setDescription('Very High Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
analog2LowSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog2LowSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: analog2LowSeverity.setDescription('Low Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
analog2VeryLowSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog2VeryLowSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: analog2VeryLowSeverity.setDescription('Very Low Level Severity 1-minor 2-major 3-critical 4-severe 5-warning')
analog2Name = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 8, 2, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: analog2Name.setStatus('mandatory')
if mibBuilder.loadTexts: analog2Name.setDescription('Name for analog sensor 2, up to 30 characters')
esPointTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 41, 10, 1), )
if mibBuilder.loadTexts: esPointTable.setStatus('mandatory')
if mibBuilder.loadTexts: esPointTable.setDescription(" This table organizes 4 basic attributes of points. A point is a particular sensor on an EventSensor (e.g., temperature, humidity, contact closure 2, relay 5, etc.). The 4 point attributes are its name, whether it's in its event state, the point's value as a number and its value as a string. Points are referenced by a point index. The point index is a string of 3 numbers separated by periods. It contains all the information necessary for getting a piece of data off an event sensor; namely, which EventSensor, point class, and which-sensor-of-that-class (a.k.a. point). ")
esPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 41, 10, 1, 1), ).setIndexNames((0, "S412-MIB", "esIndexES"), (0, "S412-MIB", "esIndexPC"), (0, "S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: esPointEntry.setStatus('mandatory')
if mibBuilder.loadTexts: esPointEntry.setDescription('Entry for EventSensor point table')
esIndexES = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esIndexES.setStatus('mandatory')
if mibBuilder.loadTexts: esIndexES.setDescription("The part of the point index that refers to an EventSensor. The point index is a string of 3 numbers separated by periods. It contains all the information necessary for getting a piece of data off an event sensor; namely, which EventSensor, point class, and which-sensor-of-that-class (a.k.a. point). This object's allowable values are 1 through 4, which refer to attached EventSensors. The number corresponding to an EventSensor is determined by the user at the initial configuration time. If there is an internal sensor in the unit, it will always be the first item in the Sensor Events setup menu. For example, if a new EventSensor is configured as the 2nd entry AFTER the internal EventSensor (if one exists) in the Sensor Events Setup Menu, then that EventSensor will be known from then on as EventSensor 2. All point indeces with esIndexES=2 will now refer to that particular EventSensor. ")
esIndexPC = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esIndexPC.setStatus('mandatory')
if mibBuilder.loadTexts: esIndexPC.setDescription('The part of the point index that refers to point class. The point index is a string of 3 numbers separated by periods. It contains all the information necessary for getting a piece of data off an event sensor; namely, which EventSensor, point class, and which-sensor-of-that-class (a.k.a. point). The values for this object are: 1=temperature sensor 2=contact closure 3=humidity sensor 4=noise sensor 5=analog input 6=relay ')
esIndexPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esIndexPoint.setStatus('mandatory')
if mibBuilder.loadTexts: esIndexPoint.setDescription('The part of the point index that delineates which sensor on the EventSensor. So this combined with esIndexPC (Point Class or type) and esIndexES (which EventSensor) uniquely defines each point (sensor or relay) attached to a unit. For example, if esIndexES is 3, esIndexPC is 1 and esIndexPoint is 4 then this is the Fourth Temperature Sensor on EventSensor number 3.')
esPointName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 10, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esPointName.setStatus('mandatory')
if mibBuilder.loadTexts: esPointName.setDescription("The name of the point on an EventSensor. For example, 'AC temp' (in the case of the temperature sensor on an EventSensor). There can be multiple points of the same point class on an EventSensor (e.g., 8 contact closures) and multiple sensor classes on an EventSensor (e.g., temperature, contact closure, humidity). If the point referenced by a given point index is solitary (e.g., temperature sensor, because there can be only one on an EventSensor), then this object reads as '<EventSensor name>'. Setting this object for solitary point indices sets the EventSensor name only. On the other hand, if a given point is among other points of the same point class on an EventSensor, then this object reads as '<Sensor name>'. Setting this object for these NON- solitary point indices sets the sensor name only - not the EventSensor name.")
esPointInEventState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 10, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esPointInEventState.setStatus('mandatory')
if mibBuilder.loadTexts: esPointInEventState.setDescription('A number referring to the event state of a point on an EventSensor. This number can have different meanings depending on the point class. If the point class is temperature, humidity, or analog input, then the values of this object are: 1=very low 2=low 3=normal 4=high 5=very high For contact closures and relays the values of this object are: 1=point in event state 2=point in normal state For any point class and any point, if the event state is undefined, then the value of this object is 0. For any point class except relay, this object is read-only. For relays, setting this object to 1 puts the relay into its open state. Setting it to 2 puts the relay into its closed state. ')
esPointValueInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esPointValueInt.setStatus('mandatory')
if mibBuilder.loadTexts: esPointValueInt.setDescription('A number referring to the value of a point on an EventSensor. If the point class is temperature, then this object is the temperature in its configured scale (default is Fahrenheit). If the point class is contact closure or relay, then this object is either 0 (open) or 1 (closed). If the point class is humidity, then this object is the percent relative humidity. If the point class is analog input, then this object is the signed input value in tenths of the configured units. For any point class except relay, this object is read-only. For relays, setting this object to 1 closes the relay, while setting it to 0 opens it. This works regardless of the control mode of the relay. ')
esPointValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 10, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esPointValueStr.setStatus('mandatory')
if mibBuilder.loadTexts: esPointValueStr.setDescription("A string referring to the value of a point on an EventSensor. For contact closures and relays this object is either 'Open' or 'Closed'. For temperature and humidity point classes, this object is the string representation of the esPointValueInt object. For temperature, 'C' or 'F' is including in the string to indicate scale. For analog inputs, this object is the string representation of the plus/minus input in volts. ")
esNumberEventSensors = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberEventSensors.setStatus('mandatory')
if mibBuilder.loadTexts: esNumberEventSensors.setDescription('The number of EventSensors recognized by the s412 Range: 0-4')
esTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 41, 11, 2), )
if mibBuilder.loadTexts: esTable.setStatus('mandatory')
if mibBuilder.loadTexts: esTable.setDescription('The table of what EventSensors are attached to the unit')
esEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 41, 11, 2, 1), ).setIndexNames((0, "S412-MIB", "esIndex"))
if mibBuilder.loadTexts: esEntry.setStatus('mandatory')
if mibBuilder.loadTexts: esEntry.setDescription('Table entry for EventSensor table')
esIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esIndex.setStatus('mandatory')
if mibBuilder.loadTexts: esIndex.setDescription("This number refers to an EventSensor; it has the same meaning as the esIndexES object (see above), except that this object is used only within the esTable branch. This object's allowable values are 1 through 4, which refer to additional attached EventSensors. The number corresponding to an EventSensor is determined by the user at the initial configuration time. ")
esID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 11, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esID.setStatus('mandatory')
if mibBuilder.loadTexts: esID.setDescription('The factory-assigned ID of the EventSensor')
esNumberTempSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 11, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberTempSensors.setStatus('mandatory')
if mibBuilder.loadTexts: esNumberTempSensors.setDescription('The number of temperature sensors on the EventSensor')
esTempReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 11, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esTempReportingMode.setStatus('mandatory')
if mibBuilder.loadTexts: esTempReportingMode.setDescription('Description of how temperature values should be interpreted.')
esNumberCCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 11, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberCCs.setStatus('mandatory')
if mibBuilder.loadTexts: esNumberCCs.setDescription('The number of contact closures on the EventSensor.')
esCCReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 11, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esCCReportingMode.setStatus('mandatory')
if mibBuilder.loadTexts: esCCReportingMode.setDescription('Description of how CC values should be interpreted.')
esNumberHumidSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 11, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberHumidSensors.setStatus('mandatory')
if mibBuilder.loadTexts: esNumberHumidSensors.setDescription('The number of humidity sensors on the EventSensor.')
esHumidReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 11, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esHumidReportingMode.setStatus('mandatory')
if mibBuilder.loadTexts: esHumidReportingMode.setDescription('Description of how humidity sensor values should be interpreted.')
esNumberAnalog = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 11, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberAnalog.setStatus('mandatory')
if mibBuilder.loadTexts: esNumberAnalog.setDescription('The number of analog inputs on the EventSensor.')
esAnalogReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 11, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAnalogReportingMode.setStatus('mandatory')
if mibBuilder.loadTexts: esAnalogReportingMode.setDescription('Description of how analog input values should be interpreted.')
esNumberRelayOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 11, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esNumberRelayOutputs.setStatus('mandatory')
if mibBuilder.loadTexts: esNumberRelayOutputs.setDescription('The number of relay outputs on the EventSensor')
esRelayReportingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 41, 11, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esRelayReportingMode.setStatus('mandatory')
if mibBuilder.loadTexts: esRelayReportingMode.setDescription('Description of how relay output values should be interpreted.')
techsupportIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 99, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: techsupportIPAddress.setDescription('May read or Set IP Address, takes effect on restart')
techsupportNetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 99, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: techsupportNetMask.setDescription('May read or Set NetMask, takes effect on restart')
techsupportRouter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 99, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportRouter.setStatus('mandatory')
if mibBuilder.loadTexts: techsupportRouter.setDescription('May read or Set Router IP Address, takes effect on restart')
techsupportRestart = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 99, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportRestart.setStatus('mandatory')
if mibBuilder.loadTexts: techsupportRestart.setDescription('Reads as 0, any Write resets unit so new IP, Netmask, Router may be used')
techsupportVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 99, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: techsupportVersionNumber.setDescription('Version Number of Firmware')
mibendObject = MibScalar((1, 3, 6, 1, 4, 1, 3052, 41, 100, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibendObject.setStatus('mandatory')
if mibBuilder.loadTexts: mibendObject.setDescription('An object after all active mib items, to help some managers compile')
contact1ActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20001)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "contact1Name"), ("S412-MIB", "contact1State"))
if mibBuilder.loadTexts: contact1ActiveTrap.setDescription('Sent to show Contact 1 is in the alarm state')
contact2ActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20002)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "contact2Name"), ("S412-MIB", "contact2State"))
if mibBuilder.loadTexts: contact2ActiveTrap.setDescription('Sent to show Contact 2 is in the alarm state')
contact3ActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20003)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "contact3Name"), ("S412-MIB", "contact3State"))
if mibBuilder.loadTexts: contact3ActiveTrap.setDescription('Sent to show Contact 3 is in the alarm state')
contact4ActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20004)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "contact4Name"), ("S412-MIB", "contact4State"))
if mibBuilder.loadTexts: contact4ActiveTrap.setDescription('Sent to show Contact 4 is in the alarm state')
contact5ActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20005)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "contact5Name"), ("S412-MIB", "contact5State"))
if mibBuilder.loadTexts: contact5ActiveTrap.setDescription('Sent to show Contact 5 is in the alarm state')
contact6ActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20006)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "contact6Name"), ("S412-MIB", "contact6State"))
if mibBuilder.loadTexts: contact6ActiveTrap.setDescription('Sent to show Contact 6 is in the alarm state')
tempHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20010)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "tempValue"))
if mibBuilder.loadTexts: tempHighTrap.setDescription('Sent to show Temp exceeded High Temp Threshold')
tempVeryHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20011)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "tempValue"))
if mibBuilder.loadTexts: tempVeryHighTrap.setDescription('Sent to show Temp exceeded Very High Temp Threshold')
tempLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20012)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "tempValue"))
if mibBuilder.loadTexts: tempLowTrap.setDescription('Sent to show Temp went below Low Temp Threshold')
tempVeryLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20013)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "tempValue"))
if mibBuilder.loadTexts: tempVeryLowTrap.setDescription('Sent to show Temp went below Very Low Temp Threshold')
humidityHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20020)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "humidityValue"))
if mibBuilder.loadTexts: humidityHighTrap.setDescription('Sent to show humidity exceeded High humidity Threshold')
humidityVeryHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20021)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "humidityValue"))
if mibBuilder.loadTexts: humidityVeryHighTrap.setDescription('Sent to show humidity exceeded Very High humidity Threshold')
humidityLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20022)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "humidityValue"))
if mibBuilder.loadTexts: humidityLowTrap.setDescription('Sent to show humidity went below Low humidity Threshold')
humidityVeryLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20023)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "humidityValue"))
if mibBuilder.loadTexts: humidityVeryLowTrap.setDescription('Sent to show humidity went below Very Low humidity Threshold')
analog1HighTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20030)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "analog1Name"), ("S412-MIB", "analog1Value"))
if mibBuilder.loadTexts: analog1HighTrap.setDescription('Sent to show analog1 exceeded High analog1 Threshold')
analog1VeryHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20031)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "analog1Name"), ("S412-MIB", "analog1Value"))
if mibBuilder.loadTexts: analog1VeryHighTrap.setDescription('Sent to show analog1 exceeded Very High analog1 Threshold')
analog1LowTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20032)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "analog1Name"), ("S412-MIB", "analog1Value"))
if mibBuilder.loadTexts: analog1LowTrap.setDescription('Sent to show analog1 went below Low analog1 Threshold')
analog1VeryLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20033)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "analog1Name"), ("S412-MIB", "analog1Value"))
if mibBuilder.loadTexts: analog1VeryLowTrap.setDescription('Sent to show analog1 went below Very Low analog1 Threshold')
analog2HighTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20040)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "analog2Name"), ("S412-MIB", "analog2Value"))
if mibBuilder.loadTexts: analog2HighTrap.setDescription('Sent to show analog2 exceeded High analog2 Threshold')
analog2VeryHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20041)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "analog2Name"), ("S412-MIB", "analog2Value"))
if mibBuilder.loadTexts: analog2VeryHighTrap.setDescription('Sent to show analog2 exceeded Very High analog2 Threshold')
analog2LowTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20042)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "analog2Name"), ("S412-MIB", "analog2Value"))
if mibBuilder.loadTexts: analog2LowTrap.setDescription('Sent to show analog2 went below Low analog2 Threshold')
analog2VeryLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20043)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "analog2Name"), ("S412-MIB", "analog2Value"))
if mibBuilder.loadTexts: analog2VeryLowTrap.setDescription('Sent to show analog2 went below Very Low analog2 Threshold')
contactESActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20101)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: contactESActiveTrap.setDescription('Sent to show EventSensor contact is in the alarm state')
tempESHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20110)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: tempESHighTrap.setDescription('Sent to show Temp exceeded High Threshold on an EventSensor')
tempESVeryHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20111)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: tempESVeryHighTrap.setDescription('Sent to show Temp exceeded Very High Threshold on an EventSensor')
tempESLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20112)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: tempESLowTrap.setDescription('Sent to show Temp went below Low Threshold on an EventSensor')
tempESVeryLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20113)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: tempESVeryLowTrap.setDescription('Sent to show Temp went below Very Low Threshold on an EventSensor')
humidityESHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20120)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: humidityESHighTrap.setDescription('Sent to show humidity exceeded High Threshold on an EventSensor')
humidityESVeryHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20121)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: humidityESVeryHighTrap.setDescription('Sent to show humidity exceeded Very High Threshold on an EventSensor')
humidityESLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20122)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: humidityESLowTrap.setDescription('Sent to show humidity went below Low Threshold on an EventSensor')
humidityESVeryLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20123)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: humidityESVeryLowTrap.setDescription('Sent to show humidity went below Very Low Threshold on an EventSensor')
voltageESHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20130)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: voltageESHighTrap.setDescription('Sent to show voltage exceeded High Threshold on an EventSensor')
voltageESVeryHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20131)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: voltageESVeryHighTrap.setDescription('Sent to show voltage exceeded Very High Threshold on an EventSensor')
voltageESLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20132)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: voltageESLowTrap.setDescription('Sent to show voltage went below Low Threshold on an EventSensor')
voltageESVeryLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,20133)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: voltageESVeryLowTrap.setDescription('Sent to show voltage went below Very Low Threshold on an EventSensor')
contact1NormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,21001)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "contact1Name"), ("S412-MIB", "contact1State"))
if mibBuilder.loadTexts: contact1NormalTrap.setDescription('Sent to show Contact 1 is in the normal state')
contact2NormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,21002)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "contact2Name"), ("S412-MIB", "contact2State"))
if mibBuilder.loadTexts: contact2NormalTrap.setDescription('Sent to show Contact 2 is in the normal state')
contact3NormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,21003)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "contact3Name"), ("S412-MIB", "contact3State"))
if mibBuilder.loadTexts: contact3NormalTrap.setDescription('Sent to show Contact 3 is in the normal state')
contact4NormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,21004)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "contact4Name"), ("S412-MIB", "contact4State"))
if mibBuilder.loadTexts: contact4NormalTrap.setDescription('Sent to show Contact 4 is in the normal state')
contact5NormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,21005)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "contact5Name"), ("S412-MIB", "contact5State"))
if mibBuilder.loadTexts: contact5NormalTrap.setDescription('Sent to show Contact 5 is in the normal state')
contact6NormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,21006)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "contact6Name"), ("S412-MIB", "contact6State"))
if mibBuilder.loadTexts: contact6NormalTrap.setDescription('Sent to show Contact 6 is in the normal state')
tempNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,21010)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "tempValue"))
if mibBuilder.loadTexts: tempNormalTrap.setDescription('Sent to show Temp went back to Normal range')
humidityNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,21020)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "humidityValue"))
if mibBuilder.loadTexts: humidityNormalTrap.setDescription('Sent to show Humidity went back to Normal range')
analog1NormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,21030)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "analog1Name"), ("S412-MIB", "analog1Value"))
if mibBuilder.loadTexts: analog1NormalTrap.setDescription('Sent to show analog1 went back to Normal range')
analog2NormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,21040)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "analog2Name"), ("S412-MIB", "analog2Value"))
if mibBuilder.loadTexts: analog2NormalTrap.setDescription('Sent to show analog2 went back to Normal range')
contactESNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,21101)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: contactESNormalTrap.setDescription('Send to show EventSensor contact has returned to normal state')
tempESNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,21110)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: tempESNormalTrap.setDescription('Sent to show EventSensor Temp went back to Normal range')
humidityESNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,21120)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: humidityESNormalTrap.setDescription('Sent to show EventSensor Humidity went back to Normal range')
voltageESNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,21130)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"), ("S412-MIB", "esPointName"), ("S412-MIB", "esPointValueInt"), ("S412-MIB", "esIndexES"), ("S412-MIB", "esIndexPoint"))
if mibBuilder.loadTexts: voltageESNormalTrap.setDescription('Sent to show EventSensor voltage went back to Normal range')
testTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052, 41) + (0,22000)).setObjects(("S412-MIB", "thisTrapText"), ("S412-MIB", "siteID"))
if mibBuilder.loadTexts: testTrap.setDescription('Sent for testing the SNMP interface')
mibBuilder.exportSymbols("S412-MIB", humidityLowTrap=humidityLowTrap, voltageESHighTrap=voltageESHighTrap, contact2ActiveDirection=contact2ActiveDirection, eventSensorConfig=eventSensorConfig, contact3ActiveTrap=contact3ActiveTrap, techsupportIPAddress=techsupportIPAddress, contact5ActiveTrap=contact5ActiveTrap, analog1HighTrap=analog1HighTrap, contact3State=contact3State, relay1PowerupState=relay1PowerupState, contact3=contact3, contact3Severity=contact3Severity, analog2VeryLowSeverity=analog2VeryLowSeverity, contact5TrapRepeat=contact5TrapRepeat, humidityESVeryHighTrap=humidityESVeryHighTrap, contact2Name=contact2Name, humidityESHighTrap=humidityESHighTrap, analog1AlarmEnable=analog1AlarmEnable, relays=relays, analog1Name=analog1Name, esCCReportingMode=esCCReportingMode, contact3AlarmEnable=contact3AlarmEnable, testTrap=testTrap, contact6=contact6, techsupport=techsupport, contact1State=contact1State, contact5ReturnNormalTrap=contact5ReturnNormalTrap, humidityAlarmEnable=humidityAlarmEnable, tempESNormalTrap=tempESNormalTrap, contact3ActiveDirection=contact3ActiveDirection, humidityHighLevel=humidityHighLevel, esIndexPoint=esIndexPoint, contact1ActiveTrap=contact1ActiveTrap, relay2PowerupState=relay2PowerupState, contact3NormalTrap=contact3NormalTrap, humidityESLowTrap=humidityESLowTrap, ptNeedPassword=ptNeedPassword, esTempReportingMode=esTempReportingMode, techsupportRouter=techsupportRouter, contacts=contacts, contact2Threshold=contact2Threshold, siteID=siteID, contact4AlarmEnable=contact4AlarmEnable, serialTimeout=serialTimeout, voltageESLowTrap=voltageESLowTrap, contact1Threshold=contact1Threshold, contact5AlarmEnable=contact5AlarmEnable, contact2ReturnNormalTrap=contact2ReturnNormalTrap, relay1=relay1, contact4TrapRepeat=contact4TrapRepeat, contact1Severity=contact1Severity, analog2=analog2, contact6State=contact6State, forceTraps=forceTraps, analog=analog, humiditysensor=humiditysensor, contact2AlarmEnable=contact2AlarmEnable, analog1VeryHighSeverity=analog1VeryHighSeverity, firmwareVersion=firmwareVersion, esID=esID, esNumberEventSensors=esNumberEventSensors, contact5ActiveDirection=contact5ActiveDirection, ptSerialParity=ptSerialParity, analog2HighTrap=analog2HighTrap, contact4Name=contact4Name, contact3Name=contact3Name, contact4Severity=contact4Severity, analog1HighSeverity=analog1HighSeverity, humidityVeryHighLevel=humidityVeryHighLevel, contact5Severity=contact5Severity, contact4ActiveTrap=contact4ActiveTrap, analog2AlarmThreshold=analog2AlarmThreshold, relay2Name=relay2Name, contact3TrapRepeat=contact3TrapRepeat, contact6ActiveDirection=contact6ActiveDirection, tempValue=tempValue, tempHighLevel=tempHighLevel, alarmStatus=alarmStatus, humidityValue=humidityValue, analog2ReturnNormalTrap=analog2ReturnNormalTrap, analog2LowSeverity=analog2LowSeverity, contact2=contact2, humidityESVeryLowTrap=humidityESVeryLowTrap, passthrough=passthrough, humidityHighSeverity=humidityHighSeverity, ptSaySiteID=ptSaySiteID, contact2Severity=contact2Severity, techsupportNetMask=techsupportNetMask, contactESNormalTrap=contactESNormalTrap, tempAlarmEnable=tempAlarmEnable, humidityVeryHighSeverity=humidityVeryHighSeverity, tempESHighTrap=tempESHighTrap, analog2TrapRepeat=analog2TrapRepeat, esIndexES=esIndexES, snmpManager2=snmpManager2, esPointValueInt=esPointValueInt, tempVeryHighLevel=tempVeryHighLevel, analog1AlarmThreshold=analog1AlarmThreshold, esRelayReportingMode=esRelayReportingMode, buildID=buildID, contact6TrapRepeat=contact6TrapRepeat, humidityName=humidityName, ptSerialBaudrate=ptSerialBaudrate, tempHighTrap=tempHighTrap, humidityESNormalTrap=humidityESNormalTrap, esIndexPC=esIndexPC, analog2LowLevel=analog2LowLevel, contact5State=contact5State, analog2HighLevel=analog2HighLevel, contact6NormalTrap=contact6NormalTrap, tempVeryHighSeverity=tempVeryHighSeverity, contact6AlarmEnable=contact6AlarmEnable, tempTrapRepeat=tempTrapRepeat, analog1Value=analog1Value, analog2LowTrap=analog2LowTrap, contact1AlarmEnable=contact1AlarmEnable, esAnalogReportingMode=esAnalogReportingMode, tempName=tempName, contactESActiveTrap=contactESActiveTrap, ptLfstripFromPort=ptLfstripFromPort, humidityReturnNormalTrap=humidityReturnNormalTrap, analog2AlarmEnable=analog2AlarmEnable, contact4NormalTrap=contact4NormalTrap, analog1NormalTrap=analog1NormalTrap, techsupportRestart=techsupportRestart, esNumberTempSensors=esNumberTempSensors, contact5NormalTrap=contact5NormalTrap, analog1VeryLowSeverity=analog1VeryLowSeverity, tempLowSeverity=tempLowSeverity, esNumberRelayOutputs=esNumberRelayOutputs, relay1Name=relay1Name, serialNumber=serialNumber, humidityVeryLowTrap=humidityVeryLowTrap, ptTimeout=ptTimeout, analog2VeryHighLevel=analog2VeryHighLevel, snmpManager=snmpManager, ptUsername=ptUsername, tempNormalTrap=tempNormalTrap, voltageESNormalTrap=voltageESNormalTrap, humidityAlarmThreshold=humidityAlarmThreshold, voltageESVeryLowTrap=voltageESVeryLowTrap, ftpPassword=ftpPassword, contact4=contact4, analog1VeryHighLevel=analog1VeryHighLevel, analog1LowTrap=analog1LowTrap, tempReturnNormalTrap=tempReturnNormalTrap, statusRepeatHours=statusRepeatHours, ptLfstripToPort=ptLfstripToPort, esIndex=esIndex, esPointEntry=esPointEntry, contact1NormalTrap=contact1NormalTrap, esPointValueStr=esPointValueStr, contact1TrapRepeat=contact1TrapRepeat, analog1=analog1, analog1VeryLowTrap=analog1VeryLowTrap, analog1LowLevel=analog1LowLevel, humidityLowLevel=humidityLowLevel, tempVeryHighTrap=tempVeryHighTrap, esPointName=esPointName, humidityVeryHighTrap=humidityVeryHighTrap, contact1ActiveDirection=contact1ActiveDirection, ftp=ftp, contact5Threshold=contact5Threshold, ptSayLoginText=ptSayLoginText, ptEscChar=ptEscChar, tempLowLevel=tempLowLevel, tempVeryLowLevel=tempVeryLowLevel, mibend=mibend, tempESVeryLowTrap=tempESVeryLowTrap, ptTCPPortnumber=ptTCPPortnumber, tempMode=tempMode, contact6ReturnNormalTrap=contact6ReturnNormalTrap, ptLoginText=ptLoginText, tempVeryLowSeverity=tempVeryLowSeverity, analog2VeryLowLevel=analog2VeryLowLevel, humidityVeryLowSeverity=humidityVeryLowSeverity, contact5Name=contact5Name, powerupTrapsend=powerupTrapsend, tempHighSeverity=tempHighSeverity, esNumberCCs=esNumberCCs, relay2CurrentState=relay2CurrentState, esNumberAnalog=esNumberAnalog, humidityHighTrap=humidityHighTrap, esHumidReportingMode=esHumidReportingMode, analog2HighSeverity=analog2HighSeverity, tempAlarmThreshold=tempAlarmThreshold, mibendObject=mibendObject, esEntry=esEntry, analog1HighLevel=analog1HighLevel, esNumberHumidSensors=esNumberHumidSensors, contact4ReturnNormalTrap=contact4ReturnNormalTrap, analog2VeryHighSeverity=analog2VeryHighSeverity, device=device, snmpManager1=snmpManager1, esPointInEventState=esPointInEventState, analog2VeryHighTrap=analog2VeryHighTrap, contact4Threshold=contact4Threshold, tempESLowTrap=tempESLowTrap, analog2Value=analog2Value, ptSerialWordlength=ptSerialWordlength, contact2ActiveTrap=contact2ActiveTrap, ftpUsername=ftpUsername, tempVeryLowTrap=tempVeryLowTrap, relay2=relay2, esTable=esTable, contact6Severity=contact6Severity, contact1Name=contact1Name, contact5=contact5, humidityVeryLowLevel=humidityVeryLowLevel, snmpManager4=snmpManager4, tempLowTrap=tempLowTrap, contact4ActiveDirection=contact4ActiveDirection, analog2VeryLowTrap=analog2VeryLowTrap, analog1LowSeverity=analog1LowSeverity, analog1ReturnNormalTrap=analog1ReturnNormalTrap, ptPassword=ptPassword, analog1VeryHighTrap=analog1VeryHighTrap, netlossTrapsend=netlossTrapsend, contact1=contact1, contact4State=contact4State, analog1TrapRepeat=analog1TrapRepeat, asentria=asentria, contact6Name=contact6Name, analog1VeryLowLevel=analog1VeryLowLevel, thisTrapText=thisTrapText, snmpManager3=snmpManager3, eventSensorStatus=eventSensorStatus, voltageESVeryHighTrap=voltageESVeryHighTrap, tempESVeryHighTrap=tempESVeryHighTrap, contact2NormalTrap=contact2NormalTrap, analog2NormalTrap=analog2NormalTrap, contact2State=contact2State, contact3Threshold=contact3Threshold, techsupportVersionNumber=techsupportVersionNumber, contact6Threshold=contact6Threshold, tempsensor=tempsensor, contact1ReturnNormalTrap=contact1ReturnNormalTrap, contact3ReturnNormalTrap=contact3ReturnNormalTrap, relay1CurrentState=relay1CurrentState, contact6ActiveTrap=contact6ActiveTrap, humidityNormalTrap=humidityNormalTrap, humidityTrapRepeat=humidityTrapRepeat, humidityLowSeverity=humidityLowSeverity, s412=s412, contact2TrapRepeat=contact2TrapRepeat, esPointTable=esPointTable, analog2Name=analog2Name)
