#
# PySNMP MIB module Hub-facs-prvt (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/Hub-facs-prvt
# Produced by pysmi-0.3.4 at Fri Jan 31 21:34:20 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, ObjectIdentity, IpAddress, internet, ModuleIdentity, NotificationType, iso, TimeTicks, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, MibIdentifier, Counter32, mgmt, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "IpAddress", "internet", "ModuleIdentity", "NotificationType", "iso", "TimeTicks", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "MibIdentifier", "Counter32", "mgmt", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
fibronics = MibIdentifier((1, 3, 6, 1, 4, 1, 22))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3))
traprun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 1))
traperm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 2))
trapvar = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 3, 3))
fm800 = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51))
fmsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 1))
fmdiag = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 5))
fmdebug = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 6))
fmsystemrun = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 1, 1))
fmsystemperm = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 51, 1, 2))
rTrapAddrTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 3, 1, 1), )
if mibBuilder.loadTexts: rTrapAddrTbl.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrTbl.setDescription('Table of managers to which traps must be sent. Up to 10 entries in table')
rTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1), ).setMaxAccess("readonly").setIndexNames((0, "Hub-facs-prvt", "rTrapAddrAddr"))
if mibBuilder.loadTexts: rTrapAddrEntry.setStatus('mandatory')
rTrapAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrAddr.setDescription('IP address of entity requesting event notification')
rTrapAddrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrComm.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrComm.setDescription('Community name the receiving entity will expect. When reading the instance of this object the value has no meaning.')
rTrapAddrVer = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrVer.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrVer.setDescription('Version number supported by destination node')
rTrapAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrType.setDescription('Type of event that should be reported to this address, bit 0 - authentication trap bit 1 - other SNMP traps bit 2 - Error Traps bit 3 - Diagnostic Traps bit 4 - Debug Traps bit 5 - Enterprise Traps other than fmDiagGenericTrap')
rTrapAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrState.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrState.setDescription('Determines status of this entry')
rTrapAddrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fixed", 0), ("removable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rTrapAddrFlag.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrFlag.setDescription('If the entry is fixed, it can not be deleted because of aging')
rTrapAddrAge = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAddrAge.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAddrAge.setDescription('Aging time of the entry (in sec)')
rTrapLearning = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapLearning.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapLearning.setDescription('Learn the addresses of the managers automatically.')
rTrapAging = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rTrapAging.setStatus('mandatory')
if mibBuilder.loadTexts: rTrapAging.setDescription('Time in sec. until we erase a trap entry')
pTrapAddrTbl = MibTable((1, 3, 6, 1, 4, 1, 22, 3, 2, 1), )
if mibBuilder.loadTexts: pTrapAddrTbl.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapAddrTbl.setDescription('Table of managers to which traps must be sent. Up to 10 entries in table')
pTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1), ).setMaxAccess("readwrite").setIndexNames((0, "Hub-facs-prvt", "pTrapAddrAddr"))
if mibBuilder.loadTexts: pTrapAddrEntry.setStatus('mandatory')
pTrapAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapAddrAddr.setDescription('IP address of entity requesting event notification')
pTrapAddrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrComm.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapAddrComm.setDescription('Community name the receiving entity will expect. When reading the instance of this object the value has no meaning.')
pTrapAddrVer = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrVer.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapAddrVer.setDescription('Version number supported by destination node')
pTrapAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapAddrType.setDescription('Type of event that should be reported to this address, bit 0 - authentication trap bit 1 - other SNMP traps bit 2 - Error Traps bit 3 - Diagnostic Traps bit 4 - Debug Traps bit 5 - all Enterprise Traps other than fmDiagGenericTrap')
pTrapAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAddrState.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapAddrState.setDescription('Determines status of this entry')
pTrapLearning = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapLearning.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapLearning.setDescription('Learn the addresses of the managers automatically.')
pTrapAging = MibScalar((1, 3, 6, 1, 4, 1, 22, 3, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pTrapAging.setStatus('mandatory')
if mibBuilder.loadTexts: pTrapAging.setDescription('Time in sec. until we erase a trap entry')
fmSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 127))).clone(namedValues=NamedValues(("cold-reset", 0), ("warm-reset", 1), ("power-up", 2), ("meaning-less-value", 127)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSystemReset.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemReset.setDescription('Resetting the CARD. When reading the instance of this object the value has no meaning. cold reset is performed with selftest , while warm start is performed without selftest')
fmSystemSelfTestLevel = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("partial", 1), ("full", 2), ("extended", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSystemSelfTestLevel.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemSelfTestLevel.setDescription('Type of self test to be executed upon cold-reset')
fmSystemIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemIpAddr.setDescription('IP address of the agent')
fmSystemIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemIPNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemIPNetMask.setDescription('IP Network Mask')
fmSystemIPDefGway = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemIPDefGway.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemIPDefGway.setDescription('Default Gateway Address')
fmSystemFileServer = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSystemFileServer.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemFileServer.setDescription('IP address to which a TFTP for boot is sent.')
fmSystemBootFile = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemBootFile.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemBootFile.setDescription('Path and file name that is sent as a TFTP request')
fmSystemDownLoad = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 127))).clone(namedValues=NamedValues(("download", 1), ("meaning-less-value", 127)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmSystemDownLoad.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemDownLoad.setDescription('Downloading the EDB. When reading the instance of this object the value has no meaning.')
fmSystemSlipIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemSlipIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemSlipIpAddr.setDescription('SLIP IP address. This is object is available only when slip interface exist ')
fmSystemSlipIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemSlipIPNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemSlipIPNetMask.setDescription('SLIP IP Network Mask This is object is available only when slip interface exist ')
fmSystemSlipBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baud1200", 0), ("baud2400", 1), ("baud4800", 2), ("baud9600", 3), ("baud19200", 4), ("baud38400", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemSlipBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemSlipBaudRate.setDescription('SLIP Baud rate This is object is available only when slip interface exist ')
fmSystemSlipParity = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemSlipParity.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemSlipParity.setDescription('SLIP Parity This is object is available only when slip interface exist ')
fmSystemSlipStopBits = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("one", 0), ("two", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemSlipStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemSlipStopBits.setDescription('SLIP Stop Bits This is object is available only when slip interface exist ')
fmSystemLastSourceIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemLastSourceIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemLastSourceIpAddr.setDescription('The source IP address, extracted from the last IP message')
fmSystemLastDestinationIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmSystemLastDestinationIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: fmSystemLastDestinationIpAddr.setDescription('The destination IP address in the the last IP message. It may be either fmSystemIpAddr or fmSystemSlipIpAddr')
pfmSystemIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: pfmSystemIpAddr.setDescription('IP address of the agent')
pfmSystemIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemIPNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: pfmSystemIPNetMask.setDescription('IP Network Mask')
pfmSystemIPDefGway = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemIPDefGway.setStatus('mandatory')
if mibBuilder.loadTexts: pfmSystemIPDefGway.setDescription('Default Gateway Address')
pfmSystemFileServer = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemFileServer.setStatus('mandatory')
if mibBuilder.loadTexts: pfmSystemFileServer.setDescription('IP address to which a TFTP for boot is sent.')
pfmSystemBootFile = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemBootFile.setStatus('mandatory')
if mibBuilder.loadTexts: pfmSystemBootFile.setDescription('Path and file name that is sent as a TFTP request')
pfmSystemReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemReadCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: pfmSystemReadCommunity.setDescription('Community string for reading When reading the instance of this object the value has no meaning.')
pfmSystemWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemWriteCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: pfmSystemWriteCommunity.setDescription('Community string for writing When reading the instance of this object the value has no meaning.')
pfmSystemSlipIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemSlipIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: pfmSystemSlipIpAddr.setDescription('SLIP IP address This is object is available only when slip interface exist ')
pfmSystemSlipIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemSlipIPNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: pfmSystemSlipIPNetMask.setDescription('SLIP IP Network Mask This is object is available only when slip interface exist ')
pfmSystemSlipBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baud1200", 0), ("baud2400", 1), ("baud4800", 2), ("baud9600", 3), ("baud19200", 4), ("baud38400", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemSlipBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: pfmSystemSlipBaudRate.setDescription('SLIP Baud rate This is object is available only when slip interface exist ')
pfmSystemSlipParity = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemSlipParity.setStatus('mandatory')
if mibBuilder.loadTexts: pfmSystemSlipParity.setDescription('SLIP Parity This is object is available only when slip interface exist ')
pfmSystemSlipStopBits = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("one", 0), ("two", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pfmSystemSlipStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: pfmSystemSlipStopBits.setDescription('SLIP Stop Bits This is object is available only when slip interface exist ')
fmDiagTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDiagTrapInfo.setStatus('mandatory')
if mibBuilder.loadTexts: fmDiagTrapInfo.setDescription('Used for generic traps. The first word is the trap code. The rest of the string is the extra information. Contains CR and LF char.')
fmDiagFaultTable = MibTable((1, 3, 6, 1, 4, 1, 22, 51, 5, 3), )
if mibBuilder.loadTexts: fmDiagFaultTable.setStatus('optional')
if mibBuilder.loadTexts: fmDiagFaultTable.setDescription('Table of fault reports from the agent')
fmDiagFaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 51, 5, 3, 1), ).setIndexNames((0, "Hub-facs-prvt", "fmDiagFaultIndex"))
if mibBuilder.loadTexts: fmDiagFaultEntry.setStatus('optional')
fmDiagFaultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDiagFaultIndex.setStatus('optional')
if mibBuilder.loadTexts: fmDiagFaultIndex.setDescription('The fault index in the fault table')
fmDiagFaultReport = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 51, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDiagFaultReport.setStatus('optional')
if mibBuilder.loadTexts: fmDiagFaultReport.setDescription('Get the faults detected by the agent')
fmDiagDebug = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal-mode", 1), ("debug-mode", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDiagDebug.setStatus('mandatory')
if mibBuilder.loadTexts: fmDiagDebug.setDescription('This object is for factory use only. Users must not write into this variable or improper operation can occur.')
fmDiagDeleteFaults = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-delete", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmDiagDeleteFaults.setStatus('mandatory')
if mibBuilder.loadTexts: fmDiagDeleteFaults.setDescription("setting this object to delete(2) causes the fault table in the e2 and it's ram image to be initialized, setting the object to no-delete(1) does not effect the fault table. when reading the object the value no-delete(1) will always be returned")
fmDebugReadMem = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 6, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDebugReadMem.setStatus('mandatory')
if mibBuilder.loadTexts: fmDebugReadMem.setDescription('Reads the bytes from the memory')
fmDebugReadEeprom = MibScalar((1, 3, 6, 1, 4, 1, 22, 51, 6, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmDebugReadEeprom.setStatus('mandatory')
if mibBuilder.loadTexts: fmDebugReadEeprom.setDescription('Reads bytes from Eeprom')
fmDiagGenericTrap = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,30)).setObjects(("Hub-facs-prvt", "fmDiagTrapInfo"))
if mibBuilder.loadTexts: fmDiagGenericTrap.setDescription('Generic Trap information')
fmDiagDownloadTrap = NotificationType((1, 3, 6, 1, 4, 1, 22, 51) + (0,31)).setObjects(("Hub-facs-prvt", "fmSystemLastSourceIpAddr"), ("Hub-facs-prvt", "fmSystemLastDestinationIpAddr"))
if mibBuilder.loadTexts: fmDiagDownloadTrap.setDescription('This trap is send before starting downloading')
mibBuilder.exportSymbols("Hub-facs-prvt", fmSystemSlipIpAddr=fmSystemSlipIpAddr, pTrapAddrComm=pTrapAddrComm, rTrapAddrEntry=rTrapAddrEntry, fmSystemSlipIPNetMask=fmSystemSlipIPNetMask, fmDiagDeleteFaults=fmDiagDeleteFaults, fmSystemDownLoad=fmSystemDownLoad, fmDebugReadEeprom=fmDebugReadEeprom, pTrapAddrTbl=pTrapAddrTbl, pfmSystemSlipBaudRate=pfmSystemSlipBaudRate, fmDiagTrapInfo=fmDiagTrapInfo, fmSystemIpAddr=fmSystemIpAddr, rTrapAddrFlag=rTrapAddrFlag, rTrapAddrType=rTrapAddrType, rTrapAddrVer=rTrapAddrVer, fmSystemLastDestinationIpAddr=fmSystemLastDestinationIpAddr, pfmSystemIpAddr=pfmSystemIpAddr, trapvar=trapvar, pTrapAging=pTrapAging, fmSystemReset=fmSystemReset, fmDiagFaultReport=fmDiagFaultReport, fmSystemBootFile=fmSystemBootFile, fmdiag=fmdiag, fmSystemSlipBaudRate=fmSystemSlipBaudRate, fmDiagDownloadTrap=fmDiagDownloadTrap, fmsystem=fmsystem, pTrapAddrAddr=pTrapAddrAddr, enterprises=enterprises, pfmSystemSlipIpAddr=pfmSystemSlipIpAddr, fmSystemFileServer=fmSystemFileServer, fmDiagFaultTable=fmDiagFaultTable, rTrapAging=rTrapAging, pTrapLearning=pTrapLearning, pfmSystemSlipIPNetMask=pfmSystemSlipIPNetMask, pfmSystemSlipParity=pfmSystemSlipParity, fmDiagFaultEntry=fmDiagFaultEntry, fmsystemperm=fmsystemperm, fm800=fm800, rTrapAddrAddr=rTrapAddrAddr, pTrapAddrType=pTrapAddrType, fmSystemSlipParity=fmSystemSlipParity, fmSystemLastSourceIpAddr=fmSystemLastSourceIpAddr, pfmSystemIPDefGway=pfmSystemIPDefGway, fmSystemSlipStopBits=fmSystemSlipStopBits, traperm=traperm, pfmSystemWriteCommunity=pfmSystemWriteCommunity, fmSystemIPDefGway=fmSystemIPDefGway, pfmSystemIPNetMask=pfmSystemIPNetMask, fmDiagGenericTrap=fmDiagGenericTrap, pTrapAddrVer=pTrapAddrVer, rTrapAddrState=rTrapAddrState, fmSystemIPNetMask=fmSystemIPNetMask, fibronics=fibronics, trap=trap, pfmSystemFileServer=pfmSystemFileServer, rTrapAddrTbl=rTrapAddrTbl, fmsystemrun=fmsystemrun, traprun=traprun, rTrapAddrAge=rTrapAddrAge, fmdebug=fmdebug, pfmSystemSlipStopBits=pfmSystemSlipStopBits, fmDiagFaultIndex=fmDiagFaultIndex, fmSystemSelfTestLevel=fmSystemSelfTestLevel, pfmSystemReadCommunity=pfmSystemReadCommunity, pTrapAddrEntry=pTrapAddrEntry, pTrapAddrState=pTrapAddrState, pfmSystemBootFile=pfmSystemBootFile, rTrapAddrComm=rTrapAddrComm, rTrapLearning=rTrapLearning, fmDiagDebug=fmDiagDebug, fmDebugReadMem=fmDebugReadMem, private=private)
