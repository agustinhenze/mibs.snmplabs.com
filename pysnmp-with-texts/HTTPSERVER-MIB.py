#
# PySNMP MIB module HTTPSERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/HTTPSERVER-MIB
# Produced by pysmi-0.3.4 at Fri Jan 31 21:34:03 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
internetServer, = mibBuilder.importSymbols("INTERNETSERVER-MIB", "internetServer")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Gauge32, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, Bits, enterprises, MibIdentifier, IpAddress, iso, Counter32, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "Bits", "enterprises", "MibIdentifier", "IpAddress", "iso", "Counter32", "Counter64", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
httpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 7, 3))
httpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1))
totalBytesSentHighWord = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesSentHighWord.setStatus('mandatory')
if mibBuilder.loadTexts: totalBytesSentHighWord.setDescription('This is the high 32-bits of the total number of of BYTEs sent by the HTTP Server.')
totalBytesSentLowWord = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesSentLowWord.setStatus('mandatory')
if mibBuilder.loadTexts: totalBytesSentLowWord.setDescription('This is the low 32-bits of the total number of of BYTEs sent by the HTTP Server.')
totalBytesReceivedHighWord = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesReceivedHighWord.setStatus('mandatory')
if mibBuilder.loadTexts: totalBytesReceivedHighWord.setDescription('This is the high 32-bits of the total number of of BYTEs received by the HTTP Server.')
totalBytesReceivedLowWord = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesReceivedLowWord.setStatus('mandatory')
if mibBuilder.loadTexts: totalBytesReceivedLowWord.setDescription('This is the low 32-bits of the total number of of BYTEs received by the HTTP Server.')
totalFilesSent = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalFilesSent.setStatus('mandatory')
if mibBuilder.loadTexts: totalFilesSent.setDescription('This is the total number of files sent by this HTTP Server.')
totalFilesReceived = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalFilesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: totalFilesReceived.setDescription('This is the total number of files received by this HTTP Server.')
currentAnonymousUsers = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentAnonymousUsers.setStatus('mandatory')
if mibBuilder.loadTexts: currentAnonymousUsers.setDescription('This is the number of anonymous users currently connected to the HTTP Server.')
currentNonAnonymousUsers = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentNonAnonymousUsers.setStatus('mandatory')
if mibBuilder.loadTexts: currentNonAnonymousUsers.setDescription('This is the number of nonanonymous users currently connected to the HTTP Server.')
totalAnonymousUsers = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalAnonymousUsers.setStatus('mandatory')
if mibBuilder.loadTexts: totalAnonymousUsers.setDescription('This is the total number of anonymous users that have ever connected to the HTTP Server.')
totalNonAnonymousUsers = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalNonAnonymousUsers.setStatus('mandatory')
if mibBuilder.loadTexts: totalNonAnonymousUsers.setDescription('This is the total number of nonanonymous users that have ever connected to the HTTP Server.')
maxAnonymousUsers = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxAnonymousUsers.setStatus('mandatory')
if mibBuilder.loadTexts: maxAnonymousUsers.setDescription('This is the maximum number of anonymous users simultaneously connected to the HTTP Server.')
maxNonAnonymousUsers = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNonAnonymousUsers.setStatus('mandatory')
if mibBuilder.loadTexts: maxNonAnonymousUsers.setDescription('This is the maximum number of nonanonymous users simultaneously connected to the HTTP Server.')
currentConnections = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentConnections.setStatus('mandatory')
if mibBuilder.loadTexts: currentConnections.setDescription('This is the current number of connections to the HTTP Server.')
maxConnections = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxConnections.setStatus('mandatory')
if mibBuilder.loadTexts: maxConnections.setDescription('This is the maximum number of simultaneous connections to the HTTP Server.')
connectionAttempts = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: connectionAttempts.setDescription('This is the number of connection attempts that have been made to the HTTP Server.')
logonAttempts = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logonAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: logonAttempts.setDescription('This is the number of logon attempts that have been made to this HTTP Server.')
totalOptions = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalOptions.setStatus('mandatory')
if mibBuilder.loadTexts: totalOptions.setDescription('This is the number of requests using the OPTIONS method that have been made to this HTTP Server.')
totalGets = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalGets.setStatus('mandatory')
if mibBuilder.loadTexts: totalGets.setDescription('This is the number of requests using the GET method that have been made to this HTTP Server.')
totalPosts = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPosts.setStatus('mandatory')
if mibBuilder.loadTexts: totalPosts.setDescription('This is the number of requests using the POST method that have been made to this HTTP Server.')
totalHeads = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalHeads.setStatus('mandatory')
if mibBuilder.loadTexts: totalHeads.setDescription('This is the number of requests using the HEAD method that have been made to this HTTP Server.')
totalPuts = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPuts.setStatus('mandatory')
if mibBuilder.loadTexts: totalPuts.setDescription('This is the number of requests using the PUT method that have been made to this HTTP Server.')
totalDeletes = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDeletes.setStatus('mandatory')
if mibBuilder.loadTexts: totalDeletes.setDescription('This is the number of requests using the DELETE method that have been made to this HTTP Server.')
totalTraces = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalTraces.setStatus('mandatory')
if mibBuilder.loadTexts: totalTraces.setDescription('This is the number of requests using the TRACE method that have been made to this HTTP Server.')
totalMove = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalMove.setStatus('mandatory')
if mibBuilder.loadTexts: totalMove.setDescription('This is the number of requests using the MOVE method that have been made to this HTTP Server.')
totalCopy = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCopy.setStatus('mandatory')
if mibBuilder.loadTexts: totalCopy.setDescription('This is the number of requests using the COPY method that have been made to this HTTP Server.')
totalMkcol = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalMkcol.setStatus('mandatory')
if mibBuilder.loadTexts: totalMkcol.setDescription('This is the number of requests using the MKCOL method that have been made to this HTTP Server.')
totalPropfind = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPropfind.setStatus('mandatory')
if mibBuilder.loadTexts: totalPropfind.setDescription('This is the number of requests using the PROPFIND method that have been made to this HTTP Server.')
totalProppatch = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalProppatch.setStatus('mandatory')
if mibBuilder.loadTexts: totalProppatch.setDescription('This is the number of requests using the PROPPATCH method that have been made to this HTTP Server.')
totalSearch = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSearch.setStatus('mandatory')
if mibBuilder.loadTexts: totalSearch.setDescription('This is the number of requests using the MS-SEARCH method that have been made to this HTTP Server.')
totalLock = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalLock.setStatus('mandatory')
if mibBuilder.loadTexts: totalLock.setDescription('This is the number of requests using the LOCK method that have been made to this HTTP Server.')
totalUnlock = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalUnlock.setStatus('mandatory')
if mibBuilder.loadTexts: totalUnlock.setDescription('This is the number of requests using the UNLOCK method that have been made to this HTTP Server.')
totalOthers = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalOthers.setStatus('mandatory')
if mibBuilder.loadTexts: totalOthers.setDescription('This is the number of requests not using the OPTIONS, GET, HEAD POST, PUT, DELETE, TRACE, MOVE, COPY, MKCOL, PROPFIND, PROPPATCH, MS-SEARCH, LOCK or UNLOCK method that have been made to this HTTP Server. This may include LINK or other methods supported by gateway applications.')
currentCGIRequests = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentCGIRequests.setStatus('mandatory')
if mibBuilder.loadTexts: currentCGIRequests.setDescription('This is the number of Common Gateway Interface (CGI) requests that are currently being serviced by this HTTP Server.')
currentBGIRequests = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentBGIRequests.setStatus('mandatory')
if mibBuilder.loadTexts: currentBGIRequests.setDescription('This is the number of Binary Gateway Interface (BGI) requests that are currently being serviced by this HTTP Server.')
totalCGIRequests = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCGIRequests.setStatus('mandatory')
if mibBuilder.loadTexts: totalCGIRequests.setDescription('This is the number of Common Gateway Interface (CGI) requests that have been made to this HTTP Server.')
totalBGIRequests = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBGIRequests.setStatus('mandatory')
if mibBuilder.loadTexts: totalBGIRequests.setDescription('This is the number of Binary Gateway Interface (BGI) requests that have been made to this HTTP Server.')
maxCGIRequests = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxCGIRequests.setStatus('mandatory')
if mibBuilder.loadTexts: maxCGIRequests.setDescription('This is the maximum number of Common Gateway Interface (CGI) requests simultaneous processed by this HTTP Server.')
maxBGIRequests = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxBGIRequests.setStatus('mandatory')
if mibBuilder.loadTexts: maxBGIRequests.setDescription('This is the maximum number of Binary Gateway Interface (BGI) requests simultaneous processed by this HTTP Server.')
currentBlockedRequests = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentBlockedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: currentBlockedRequests.setDescription('This is the current number of requests that have been temporarily blocked by this HTTP Server due to bandwidth throttling settings.')
totalBlockedRequests = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBlockedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: totalBlockedRequests.setDescription('This is the total number of requests that have been temporarily blocked by this HTTP Server due to bandwidth throttling settings.')
totalAllowedRequests = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalAllowedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: totalAllowedRequests.setDescription('This is the total number of requests that have been allowed by the bandwidth throttling settings on this HTTP Server.')
totalRejectedRequests = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRejectedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: totalRejectedRequests.setDescription('This is the total number of requests that have been rejected by this HTTP Server due to bandwidth throttling settings.')
totalNotFoundErrors = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalNotFoundErrors.setStatus('mandatory')
if mibBuilder.loadTexts: totalNotFoundErrors.setDescription('This is the total number of requests the HTTP server could not satisfy because the requested resource could not be found.')
totalLockedErrors = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalLockedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: totalLockedErrors.setDescription('This is the total number of requests the HTTP server could not satisfy because the requested resource was locked.')
measuredBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measuredBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: measuredBandwidth.setDescription('This is the I/O bandwidth used by this HTTP Server, averaged over a minute.')
currentCALsforAuthenticatedUsers = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentCALsforAuthenticatedUsers.setStatus('mandatory')
if mibBuilder.loadTexts: currentCALsforAuthenticatedUsers.setDescription('This is the current count of Client Access Licenses (CALs) available to this HTTP Server for simultaneous use by authenticated users.')
maxCALsforAuthenticatedUsers = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxCALsforAuthenticatedUsers.setStatus('mandatory')
if mibBuilder.loadTexts: maxCALsforAuthenticatedUsers.setDescription('This is the maximum count of Client Access Licenses (CALs) used by this HTTP Server for simultaneous use by authenticated users.')
totalCALFailedAuthenticatedUser = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCALFailedAuthenticatedUser.setStatus('mandatory')
if mibBuilder.loadTexts: totalCALFailedAuthenticatedUser.setDescription('This is the total number of HTTP requests that have failed on this HTTP server due to a Client Access License (CAL) being unavailable for an authenticated user.')
currentCALsforSecureConnections = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentCALsforSecureConnections.setStatus('mandatory')
if mibBuilder.loadTexts: currentCALsforSecureConnections.setDescription('This is the current count of Client Access Licenses (CALs) available to this HTTP Server for simultaneous use by secure connections.')
maxCALsforSecureConnections = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxCALsforSecureConnections.setStatus('mandatory')
if mibBuilder.loadTexts: maxCALsforSecureConnections.setDescription('This is the maximum count of Client Access Licenses (CALs) available to this Http Server for simultaneous use by secure connections.')
totalCALFailedSecureConnection = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 7, 3, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCALFailedSecureConnection.setStatus('mandatory')
if mibBuilder.loadTexts: totalCALFailedSecureConnection.setDescription('This is the total number of HTTP requests that have failed on this HTTP server due to a Client Access License (CAL) being unavailable for use by a secure connection.')
mibBuilder.exportSymbols("HTTPSERVER-MIB", totalPuts=totalPuts, totalCALFailedAuthenticatedUser=totalCALFailedAuthenticatedUser, logonAttempts=logonAttempts, totalPropfind=totalPropfind, totalBytesSentHighWord=totalBytesSentHighWord, totalCALFailedSecureConnection=totalCALFailedSecureConnection, httpServer=httpServer, totalBytesReceivedLowWord=totalBytesReceivedLowWord, totalHeads=totalHeads, maxConnections=maxConnections, totalPosts=totalPosts, maxBGIRequests=maxBGIRequests, currentCALsforSecureConnections=currentCALsforSecureConnections, totalOthers=totalOthers, totalAnonymousUsers=totalAnonymousUsers, maxNonAnonymousUsers=maxNonAnonymousUsers, totalUnlock=totalUnlock, totalMkcol=totalMkcol, maxCGIRequests=maxCGIRequests, totalNotFoundErrors=totalNotFoundErrors, currentCALsforAuthenticatedUsers=currentCALsforAuthenticatedUsers, totalCGIRequests=totalCGIRequests, totalTraces=totalTraces, totalBlockedRequests=totalBlockedRequests, totalLockedErrors=totalLockedErrors, currentNonAnonymousUsers=currentNonAnonymousUsers, totalGets=totalGets, currentConnections=currentConnections, maxCALsforSecureConnections=maxCALsforSecureConnections, totalLock=totalLock, connectionAttempts=connectionAttempts, totalProppatch=totalProppatch, totalBGIRequests=totalBGIRequests, currentAnonymousUsers=currentAnonymousUsers, currentBGIRequests=currentBGIRequests, currentBlockedRequests=currentBlockedRequests, maxCALsforAuthenticatedUsers=maxCALsforAuthenticatedUsers, totalCopy=totalCopy, totalBytesSentLowWord=totalBytesSentLowWord, totalNonAnonymousUsers=totalNonAnonymousUsers, totalMove=totalMove, maxAnonymousUsers=maxAnonymousUsers, currentCGIRequests=currentCGIRequests, totalRejectedRequests=totalRejectedRequests, totalSearch=totalSearch, measuredBandwidth=measuredBandwidth, totalBytesReceivedHighWord=totalBytesReceivedHighWord, totalFilesSent=totalFilesSent, totalDeletes=totalDeletes, httpStatistics=httpStatistics, totalOptions=totalOptions, totalAllowedRequests=totalAllowedRequests, totalFilesReceived=totalFilesReceived)
